# generated by datamodel-codegen:
#   filename:  https://api.monday.com/v2/get_schema?format=sdl
#   timestamp: 2025-02-13T14:40:02+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Literal, Optional, TypeAlias, Union

from pydantic import BaseModel, Field

Boolean: TypeAlias = bool
"""
The `Boolean` scalar type represents `true` or `false`.
"""


CompareValue: TypeAlias = str


Date: TypeAlias = str
"""
A date.
"""


File: TypeAlias = str
"""
A multipart file
"""


Float: TypeAlias = float
"""
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
"""


ID: TypeAlias = str
"""
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
"""


ISO8601DateTime: TypeAlias = str
"""
An ISO 8601-encoded datetime
"""


Int: TypeAlias = int
"""
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
"""


JSON: TypeAlias = str
"""
A JSON formatted string.
"""


String: TypeAlias = str
"""
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
"""


class AssetsSource(Enum):
    """
    The source of the asset
    """

    all = "all"
    columns = "columns"
    gallery = "gallery"


class BoardAttributes(Enum):
    """
    The board attributes available.
    """

    communication = "communication"
    description = "description"
    name = "name"


class BoardKind(Enum):
    """
    The board kinds available.
    """

    private = "private"
    public = "public"
    share = "share"


class BoardObjectType(Enum):
    """
    The board object types.
    """

    board = "board"
    custom_object = "custom_object"
    document = "document"
    sub_items_board = "sub_items_board"


class BoardSubscriberKind(Enum):
    """
    The board subscriber kind.
    """

    owner = "owner"
    subscriber = "subscriber"


class BoardsOrderBy(Enum):
    """
    Options to order by.
    """

    created_at = "created_at"
    used_at = "used_at"


class ColumnProperty(Enum):
    """
    The property name of the column to be changed.
    """

    description = "description"
    title = "title"


class ColumnType(Enum):
    """
    The columns to create.
    """

    auto_number = "auto_number"
    board_relation = "board_relation"
    button = "button"
    checkbox = "checkbox"
    color_picker = "color_picker"
    country = "country"
    creation_log = "creation_log"
    date = "date"
    dependency = "dependency"
    doc = "doc"
    dropdown = "dropdown"
    email = "email"
    file = "file"
    formula = "formula"
    group = "group"
    hour = "hour"
    integration = "integration"
    item_assignees = "item_assignees"
    item_id = "item_id"
    last_updated = "last_updated"
    link = "link"
    location = "location"
    long_text = "long_text"
    mirror = "mirror"
    name = "name"
    numbers = "numbers"
    people = "people"
    person = "person"
    phone = "phone"
    progress = "progress"
    rating = "rating"
    status = "status"
    subtasks = "subtasks"
    tags = "tags"
    team = "team"
    text = "text"
    time_tracking = "time_tracking"
    timeline = "timeline"
    unsupported = "unsupported"
    vote = "vote"
    week = "week"
    world_clock = "world_clock"


class DocBlockContentType(Enum):
    """
    Various documents blocks types, such as text.
    """

    bulleted_list = "bulleted_list"
    check_list = "check_list"
    code = "code"
    divider = "divider"
    image = "image"
    large_title = "large_title"
    layout = "layout"
    medium_title = "medium_title"
    normal_text = "normal_text"
    notice_box = "notice_box"
    numbered_list = "numbered_list"
    page_break = "page_break"
    quote = "quote"
    small_title = "small_title"
    table = "table"
    video = "video"


class DocsOrderBy(Enum):
    """
    Options to order by.
    """

    created_at = "created_at"
    used_at = "used_at"


class DuplicateBoardType(Enum):
    """
    The board duplicate types available.
    """

    duplicate_board_with_pulses = "duplicate_board_with_pulses"
    duplicate_board_with_pulses_and_updates = "duplicate_board_with_pulses_and_updates"
    duplicate_board_with_structure = "duplicate_board_with_structure"


class FileLinkValueKind(Enum):
    """
    The type of a link value stored inside a file column
    """

    box = "box"
    dropbox = "dropbox"
    google_drive = "google_drive"
    link = "link"
    onedrive = "onedrive"


class FirstDayOfTheWeek(Enum):
    """
    The first day of work week
    """

    monday = "monday"
    sunday = "sunday"


class FolderColor(Enum):
    """
    One value out of a list of valid folder colors
    """

    AQUAMARINE = "AQUAMARINE"
    BRIGHT_BLUE = "BRIGHT_BLUE"
    BRIGHT_GREEN = "BRIGHT_GREEN"
    CHILI_BLUE = "CHILI_BLUE"
    DARK_ORANGE = "DARK_ORANGE"
    DARK_PURPLE = "DARK_PURPLE"
    DARK_RED = "DARK_RED"
    DONE_GREEN = "DONE_GREEN"
    INDIGO = "INDIGO"
    LIPSTICK = "LIPSTICK"
    NULL = "NULL"
    PURPLE = "PURPLE"
    SOFIA_PINK = "SOFIA_PINK"
    STUCK_RED = "STUCK_RED"
    SUNSET = "SUNSET"
    WORKING_ORANGE = "WORKING_ORANGE"


class FolderCustomIcon(Enum):
    """
    One value out of a list of valid folder custom icons
    """

    FOLDER = "FOLDER"
    MOREBELOW = "MOREBELOW"
    MOREBELOWFILLED = "MOREBELOWFILLED"
    NULL = "NULL"
    WORK = "WORK"


class FolderFontWeight(Enum):
    """
    One value out of a list of valid folder font weights
    """

    FONT_WEIGHT_BOLD = "FONT_WEIGHT_BOLD"
    FONT_WEIGHT_LIGHT = "FONT_WEIGHT_LIGHT"
    FONT_WEIGHT_NORMAL = "FONT_WEIGHT_NORMAL"
    FONT_WEIGHT_VERY_LIGHT = "FONT_WEIGHT_VERY_LIGHT"
    NULL = "NULL"


class GroupAttributes(Enum):
    """
    The group attributes available.
    """

    color = "color"
    position = "position"
    relative_position_after = "relative_position_after"
    relative_position_before = "relative_position_before"
    title = "title"


class ItemsOrderByDirection(Enum):
    """
    The direction to order the items by
    """

    asc = "asc"
    desc = "desc"


class ItemsQueryOperator(Enum):
    """
    The condition between the query rules
    """

    and_ = "and"
    or_ = "or"


class ItemsQueryRuleOperator(Enum):
    """
    The operator to use for the value comparison
    """

    any_of = "any_of"
    between = "between"
    contains_terms = "contains_terms"
    contains_text = "contains_text"
    ends_with = "ends_with"
    greater_than = "greater_than"
    greater_than_or_equals = "greater_than_or_equals"
    is_empty = "is_empty"
    is_not_empty = "is_not_empty"
    lower_than = "lower_than"
    lower_than_or_equal = "lower_than_or_equal"
    not_any_of = "not_any_of"
    not_contains_text = "not_contains_text"
    starts_with = "starts_with"
    within_the_last = "within_the_last"
    within_the_next = "within_the_next"


class Kind(Enum):
    """
    Kind of assignee
    """

    person = "person"
    team = "team"


class NotificationTargetType(Enum):
    """
    The notification's target type.
    """

    Post = "Post"
    Project = "Project"


class NumberValueUnitDirection(Enum):
    """
    Indicates where the unit symbol should be placed in a number value
    """

    left = "left"
    right = "right"


class Object(Enum):
    Board = "Board"
    Folder = "Folder"
    Overview = "Overview"


class PositionRelative(Enum):
    """
    The position relative method.
    """

    after_at = "after_at"
    before_at = "before_at"


class State(Enum):
    """
    The possible states for a board or item.
    """

    active = "active"
    all = "all"
    archived = "archived"
    deleted = "deleted"


class UserKind(Enum):
    """
    The possibilities for a user kind.
    """

    all = "all"
    guests = "guests"
    non_guests = "non_guests"
    non_pending = "non_pending"


class VersionKind(Enum):
    """
    All possible API version types
    """

    current = "current"
    deprecated = "deprecated"
    dev = "dev"
    maintenance = "maintenance"
    old__maintenance = "old__maintenance"
    old_previous_maintenance = "old_previous_maintenance"
    previous_maintenance = "previous_maintenance"
    release_candidate = "release_candidate"


class WebhookEventType(Enum):
    """
    The webhook's target type.
    """

    change_column_value = "change_column_value"
    change_name = "change_name"
    change_specific_column_value = "change_specific_column_value"
    change_status_column_value = "change_status_column_value"
    change_subitem_column_value = "change_subitem_column_value"
    change_subitem_name = "change_subitem_name"
    create_column = "create_column"
    create_item = "create_item"
    create_subitem = "create_subitem"
    create_subitem_update = "create_subitem_update"
    create_update = "create_update"
    delete_update = "delete_update"
    edit_update = "edit_update"
    item_archived = "item_archived"
    item_deleted = "item_deleted"
    item_moved_to_any_group = "item_moved_to_any_group"
    item_moved_to_specific_group = "item_moved_to_specific_group"
    item_restored = "item_restored"
    move_subitem = "move_subitem"
    subitem_archived = "subitem_archived"
    subitem_deleted = "subitem_deleted"


class WorkspaceKind(Enum):
    """
    The workspace kinds available.
    """

    closed = "closed"
    open = "open"


class WorkspaceSubscriberKind(Enum):
    """
    The workspace subscriber kind.
    """

    owner = "owner"
    subscriber = "subscriber"


class WorkspacesOrderBy(Enum):
    """
    Options to order by.
    """

    created_at = "created_at"


class ColumnValue(BaseModel):
    board_id: Optional[ID] = Field(None, description="The board's unique identifier.")
    column: Optional[Column] = Field(
        None, description="The column that this value belongs to."
    )
    id: Optional[ID] = Field(None, description="The column's unique identifier.")
    item_id: Optional[ID] = Field(None, description="The item's unique identifier.")
    text: Optional[String] = Field(
        None,
        description="Text representation of the column value. Note: Not all columns support textual value",
    )
    type: Optional[ColumnType] = Field(None, description="The column's type.")
    value: Optional[JSON] = Field(
        None, description="The column's raw value in JSON format."
    )
    typename__: Optional[Literal["ColumnValue"]] = Field(
        "ColumnValue", alias="__typename"
    )


class Account(BaseModel):
    """
    Your monday.com account
    """

    active_members_count: Optional[Int] = Field(
        None, description="The number of active member users in the account"
    )
    country_code: Optional[String] = Field(
        None, description="The account's country two-letter code in ISO3166 format"
    )
    first_day_of_the_week: Optional[FirstDayOfTheWeek] = Field(
        None, description="The first day of the week for the account (sunday / monday)"
    )
    id: Optional[ID] = Field(None, description="The account's unique identifier.")
    logo: Optional[String] = Field(None, description="The account's logo.")
    name: Optional[String] = Field(None, description="The account's name.")
    plan: Optional[Plan] = Field(None, description="The account's payment plan.")
    products: Optional[List[Optional[AccountProduct]]] = Field(
        None, description="The account's active products"
    )
    show_timeline_weekends: Optional[Boolean] = Field(
        None, description="Show weekends in timeline"
    )
    sign_up_product_kind: Optional[String] = Field(
        None, description="The product the account signed up to first."
    )
    slug: Optional[String] = Field(None, description="The account's slug.")
    tier: Optional[String] = Field(None, description="The account's tier.")
    typename__: Optional[Literal["Account"]] = Field("Account", alias="__typename")


class AccountProduct(BaseModel):
    """
    The product a workspace is used in.
    """

    default_workspace_id: Optional[ID] = Field(
        None, description="The account product default workspace id"
    )
    id: Optional[ID] = Field(None, description="The account product id")
    kind: Optional[String] = Field(
        None,
        description="The account product kind (core / marketing / crm / software /\nprojectManagement / project_management / service / forms / whiteboard).",
    )
    typename__: Optional[Literal["AccountProduct"]] = Field(
        "AccountProduct", alias="__typename"
    )


class ActivityLogType(BaseModel):
    """
    An activity log event
    """

    account_id: Optional[String] = Field(None, description="")
    created_at: Optional[String] = Field(None, description="")
    data: Optional[String] = Field(
        None, description="The item's column values in string form."
    )
    entity: Optional[String] = Field(None, description="")
    event: Optional[String] = Field(None, description="")
    id: Optional[String] = Field(None, description="")
    user_id: Optional[String] = Field(None, description="")
    typename__: Optional[Literal["ActivityLogType"]] = Field(
        "ActivityLogType", alias="__typename"
    )


class AppInstall(BaseModel):
    """
    An app install details.
    """

    app_id: Optional[ID] = Field(None, description="The app's unique identifier.")
    app_install_account: Optional[AppInstallAccount] = Field(
        None, description="An app installer's account details."
    )
    app_install_user: Optional[AppInstallUser] = Field(
        None, description="An app installer's user details"
    )
    app_version: Optional[AppVersion] = Field(
        None, description="The app's version details"
    )
    permissions: Optional[AppInstallPermissions] = Field(
        None, description="The required and approved scopes for an app install."
    )
    timestamp: Optional[String] = Field(None, description="Installation date")
    typename__: Optional[Literal["AppInstall"]] = Field(
        "AppInstall", alias="__typename"
    )


class AppInstallAccount(BaseModel):
    """
    An app installer's account details
    """

    id: Optional[ID] = Field(None, description="The app's installer account id.")
    typename__: Optional[Literal["AppInstallAccount"]] = Field(
        "AppInstallAccount", alias="__typename"
    )


class AppInstallPermissions(BaseModel):
    """
    The required and approved scopes for an app install.
    """

    approved_scopes: Optional[List[String]] = Field(
        None, description="The scopes approved by the account admin"
    )
    required_scopes: Optional[List[String]] = Field(
        None, description="The scopes required by the latest live version"
    )
    typename__: Optional[Literal["AppInstallPermissions"]] = Field(
        "AppInstallPermissions", alias="__typename"
    )


class AppInstallUser(BaseModel):
    """
    An app installer's user details
    """

    id: Optional[ID] = Field(None, description="The app's installer user id.")
    typename__: Optional[Literal["AppInstallUser"]] = Field(
        "AppInstallUser", alias="__typename"
    )


class AppMonetizationStatus(BaseModel):
    """
    The app monetization status for the current account
    """

    is_supported: Optional[Boolean] = Field(
        None, description="Is apps monetization is supported for the account"
    )
    typename__: Optional[Literal["AppMonetizationStatus"]] = Field(
        "AppMonetizationStatus", alias="__typename"
    )


class AppSubscription(BaseModel):
    """
    The account subscription details for the app.
    """

    billing_period: Optional[String] = Field(
        None, description="The type of the billing period [monthly/yearly]."
    )
    days_left: Optional[Int] = Field(
        None, description="The number of days left until the subscription ends."
    )
    is_trial: Optional[Boolean] = Field(None, description="Is the subscription a trial")
    plan_id: Optional[String] = Field(
        None, description="The subscription plan id (on the app's side)."
    )
    pricing_version: Optional[Int] = Field(
        None, description="The pricing version of subscription plan."
    )
    renewal_date: Optional[Date] = Field(
        None, description="The subscription renewal date."
    )
    typename__: Optional[Literal["AppSubscription"]] = Field(
        "AppSubscription", alias="__typename"
    )


class AppSubscriptionOperationsCounter(BaseModel):
    """
    The Operations counter response for the app action.
    """

    app_subscription: Optional[AppSubscription] = Field(
        None, description="The account subscription details for the app."
    )
    counter_value: Optional[Int] = Field(None, description="The new counter value.")
    kind: Optional[String] = Field(None, description="Operations name.")
    period_key: Optional[String] = Field(None, description="Window key.")
    typename__: Optional[Literal["AppSubscriptionOperationsCounter"]] = Field(
        "AppSubscriptionOperationsCounter", alias="__typename"
    )


class AppVersion(BaseModel):
    """
    An app's version details.
    """

    major: Optional[Int] = Field(None, description="The app's major version.")
    minor: Optional[Int] = Field(None, description="The app's minor version.")
    patch: Optional[Int] = Field(None, description="The app's patch version.")
    text: Optional[String] = Field(None, description="The app's version text")
    type: Optional[String] = Field(None, description="The app's version type.")
    typename__: Optional[Literal["AppVersion"]] = Field(
        "AppVersion", alias="__typename"
    )


class AppsMonetizationInfo(BaseModel):
    """
    The app monetization information for the current account
    """

    seats_count: Optional[Int] = Field(
        None,
        description="The number of seats in the account, across all products, used to match the\napp’s subscription among apps that utilize the seats-based monetization method",
    )
    typename__: Optional[Literal["AppsMonetizationInfo"]] = Field(
        "AppsMonetizationInfo", alias="__typename"
    )


class Asset(BaseModel):
    """
    A file uploaded to monday.com
    """

    created_at: Optional[Date] = Field(None, description="The file's creation date.")
    file_extension: Optional[String] = Field(None, description="The file's extension.")
    file_size: Optional[Int] = Field(None, description="The file's size in bytes.")
    id: Optional[ID] = Field(None, description="The file's unique identifier.")
    name: Optional[String] = Field(None, description="The file's name.")
    original_geometry: Optional[String] = Field(
        None, description="original geometry of the asset."
    )
    public_url: Optional[String] = Field(
        None, description="public url to the asset, valid for 1 hour."
    )
    uploaded_by: Optional[User] = Field(
        None, description="The user who uploaded the file."
    )
    url: Optional[String] = Field(None, description="url to view the asset.")
    url_thumbnail: Optional[String] = Field(
        None,
        description="url to view the asset in thumbnail mode. Only available for images.",
    )
    typename__: Optional[Literal["Asset"]] = Field("Asset", alias="__typename")


class BatchExtendTrialPeriod(BaseModel):
    """
    Result of an batch operation
    """

    details: Optional[List[ExtendTrialPeriod]] = Field(
        None, description="Details of operations"
    )
    reason: Optional[String] = Field(None, description="Reason of an error")
    success: Optional[Boolean] = Field(None, description="Result of a batch operation")
    typename__: Optional[Literal["BatchExtendTrialPeriod"]] = Field(
        "BatchExtendTrialPeriod", alias="__typename"
    )


class Board(BaseModel):
    """
    A monday.com board.
    """

    activity_logs: Optional[List[Optional[ActivityLogType]]] = Field(
        None, description="The board log events."
    )
    board_folder_id: Optional[ID] = Field(
        None, description="The board's folder unique identifier."
    )
    board_kind: Optional[BoardKind] = Field(
        None, description="The board's kind (public / private / share)."
    )
    columns: Optional[List[Optional[Column]]] = Field(
        None, description="The board's visible columns."
    )
    communication: Optional[JSON] = Field(
        None, description="Get the board communication value - typically meeting ID"
    )
    creator: Optional[User] = Field(None, description="The creator of the board.")
    description: Optional[String] = Field(None, description="The board's description.")
    groups: Optional[List[Optional[Group]]] = Field(
        None, description="The board's visible groups."
    )
    id: Optional[ID] = Field(None, description="The unique identifier of the board.")
    item_terminology: Optional[String] = Field(
        None,
        description="The Board's item nickname, one of a predefined set of values, or a custom user value",
    )
    items_count: Optional[Int] = Field(
        None, description="The number of items on the board"
    )
    items_page: Optional[ItemsResponse] = Field(
        None, description="The board's items (rows)."
    )
    name: Optional[String] = Field(None, description="The board's name.")
    owner: Optional[User] = Field(None, description="The owner of the board.")
    owners: Optional[List[Optional[User]]] = Field(
        None, description="List of user board owners"
    )
    permissions: Optional[String] = Field(None, description="The board's permissions.")
    state: Optional[State] = Field(
        None, description="The board's state (all / active / archived / deleted)."
    )
    subscribers: Optional[List[Optional[User]]] = Field(
        None, description="The board's subscribers."
    )
    tags: Optional[List[Optional[Tag]]] = Field(
        None, description="The board's specific tags."
    )
    team_owners: Optional[List[Team]] = Field(
        None, description="List of team board owners"
    )
    team_subscribers: Optional[List[Team]] = Field(
        None, description="The board's team subscribers."
    )
    top_group: Optional[Group] = Field(None, description="The top group at this board.")
    type: Optional[BoardObjectType] = Field(None, description="The board object type.")
    updated_at: Optional[ISO8601DateTime] = Field(
        None, description="The last time the board was updated at."
    )
    updates: Optional[List[Optional[Update]]] = Field(
        None, description="The board's updates."
    )
    url: Optional[String] = Field(None, description="The Board's url")
    views: Optional[List[Optional[BoardView]]] = Field(
        None, description="The board's views."
    )
    workspace: Optional[Workspace] = Field(
        None,
        description="The workspace that contains this board (null for main workspace).",
    )
    workspace_id: Optional[ID] = Field(
        None,
        description="The board's workspace unique identifier (null for main workspace).",
    )
    typename__: Optional[Literal["Board"]] = Field("Board", alias="__typename")


class BoardDuplication(BaseModel):
    """
    A board duplication
    """

    board: Optional[Board] = Field(
        None, description="The new board created by the duplication"
    )
    is_async: Optional[Boolean] = Field(
        None, description="Was the board duplication performed asynchronously"
    )
    typename__: Optional[Literal["BoardDuplication"]] = Field(
        "BoardDuplication", alias="__typename"
    )


class BoardRelationValue(ColumnValue):
    board_id: Optional[ID] = Field(None, description="The board's unique identifier.")
    column: Optional[Column] = Field(
        None, description="The column that this value belongs to."
    )
    display_value: Optional[String] = Field(
        None,
        description="A string representing all the names of the linked items, separated by commas",
    )
    id: Optional[ID] = Field(None, description="The column's unique identifier.")
    item_id: Optional[ID] = Field(None, description="The item's unique identifier.")
    linked_item_ids: Optional[List[ID]] = Field(
        None, description="The linked items IDs"
    )
    linked_items: Optional[List[Item]] = Field(None, description="The linked items.")
    text: Optional[String] = Field(
        None,
        description="Text representation of the column value. Note: Not all columns support textual value",
    )
    type: Optional[ColumnType] = Field(None, description="The column's type.")
    updated_at: Optional[Date] = Field(
        None, description="The date when column value was last updated."
    )
    value: Optional[JSON] = Field(
        None, description="The column's raw value in JSON format."
    )
    typename__: Optional[Literal["BoardRelationValue"]] = Field(
        "BoardRelationValue", alias="__typename"
    )


class BoardView(BaseModel):
    """
    A board's view.
    """

    id: Optional[ID] = Field(None, description="The view's unique identifier.")
    name: Optional[String] = Field(None, description="The view's name.")
    settings_str: Optional[String] = Field(
        None, description="The view's settings in a string form."
    )
    source_view_id: Optional[ID] = Field(
        None, description="The view's template id if it was duplictated from other"
    )
    type: Optional[String] = Field(None, description="The view's type.")
    view_specific_data_str: Optional[String] = Field(
        None, description="Specific board view data (supported only for forms)"
    )
    typename__: Optional[Literal["BoardView"]] = Field("BoardView", alias="__typename")


class ButtonValue(ColumnValue):
    board_id: Optional[ID] = Field(None, description="The board's unique identifier.")
    color: Optional[String] = Field(
        None, description="The button's color in hex value."
    )
    column: Optional[Column] = Field(
        None, description="The column that this value belongs to."
    )
    id: Optional[ID] = Field(None, description="The column's unique identifier.")
    item_id: Optional[ID] = Field(None, description="The item's unique identifier.")
    label: Optional[String] = Field(None, description="The button's label.")
    text: Optional[String] = None
    type: Optional[ColumnType] = Field(None, description="The column's type.")
    value: Optional[JSON] = Field(
        None, description="The column's raw value in JSON format."
    )
    typename__: Optional[Literal["ButtonValue"]] = Field(
        "ButtonValue", alias="__typename"
    )


class ChangeTeamMembershipsResult(BaseModel):
    """
    The result of adding users to / removing users from a team.
    """

    failed_users: Optional[List[User]] = Field(
        None, description="The users that team membership update failed for"
    )
    successful_users: Optional[List[User]] = Field(
        None, description="The users that team membership update succeeded for"
    )
    typename__: Optional[Literal["ChangeTeamMembershipsResult"]] = Field(
        "ChangeTeamMembershipsResult", alias="__typename"
    )


class CheckboxValue(ColumnValue):
    board_id: Optional[ID] = Field(None, description="The board's unique identifier.")
    checked: Optional[Boolean] = Field(None, description="The column's boolean value.")
    column: Optional[Column] = Field(
        None, description="The column that this value belongs to."
    )
    id: Optional[ID] = Field(None, description="The column's unique identifier.")
    item_id: Optional[ID] = Field(None, description="The item's unique identifier.")
    text: Optional[String] = None
    type: Optional[ColumnType] = Field(None, description="The column's type.")
    updated_at: Optional[Date] = Field(
        None, description="The date when column value was last updated."
    )
    value: Optional[JSON] = None
    typename__: Optional[Literal["CheckboxValue"]] = Field(
        "CheckboxValue", alias="__typename"
    )


class ColorPickerValue(ColumnValue):
    board_id: Optional[ID] = Field(None, description="The board's unique identifier.")
    color: Optional[String] = Field(None, description="The color in hex value.")
    column: Optional[Column] = Field(
        None, description="The column that this value belongs to."
    )
    id: Optional[ID] = Field(None, description="The column's unique identifier.")
    item_id: Optional[ID] = Field(None, description="The item's unique identifier.")
    text: Optional[String] = None
    type: Optional[ColumnType] = Field(None, description="The column's type.")
    updated_at: Optional[Date] = Field(
        None, description="The date when column value was last updated."
    )
    value: Optional[JSON] = Field(
        None, description="The column's raw value in JSON format."
    )
    typename__: Optional[Literal["ColorPickerValue"]] = Field(
        "ColorPickerValue", alias="__typename"
    )


class Column(BaseModel):
    archived: Optional[Boolean] = Field(
        None, description="Is the column archived or not."
    )
    description: Optional[String] = Field(None, description="The column's description.")
    id: Optional[ID] = Field(None, description="The column's unique identifier.")
    settings_str: Optional[String] = Field(
        None, description="The column's settings in a string form."
    )
    title: Optional[String] = Field(None, description="The column's title.")
    type: Optional[ColumnType] = Field(None, description="The column's type.")
    width: Optional[Int] = Field(None, description="The column's width.")
    typename__: Optional[Literal["Column"]] = Field("Column", alias="__typename")


class Complexity(BaseModel):
    """
    Complexity data.
    """

    after: Optional[Int] = Field(
        None, description="The remainder of complexity after the query's execution."
    )
    before: Optional[Int] = Field(
        None, description="The remainder of complexity before the query's execution."
    )
    query: Optional[Int] = Field(None, description="The specific query's complexity.")
    reset_in_x_seconds: Optional[Int] = Field(
        None, description="How long in seconds before the complexity budget is reset"
    )
    typename__: Optional[Literal["Complexity"]] = Field(
        "Complexity", alias="__typename"
    )


class Country(BaseModel):
    code: Optional[String] = Field(None, description="The country's two-letter code.")
    name: Optional[String] = Field(None, description="The country's name.")
    typename__: Optional[Literal["Country"]] = Field("Country", alias="__typename")


class CountryValue(ColumnValue):
    board_id: Optional[ID] = Field(None, description="The board's unique identifier.")
    column: Optional[Column] = Field(
        None, description="The column that this value belongs to."
    )
    country: Optional[Country] = Field(None, description="The country value.")
    id: Optional[ID] = Field(None, description="The column's unique identifier.")
    item_id: Optional[ID] = Field(None, description="The item's unique identifier.")
    text: Optional[String] = Field(
        None,
        description="Text representation of the column value. Note: Not all columns support textual value",
    )
    type: Optional[ColumnType] = Field(None, description="The column's type.")
    updated_at: Optional[Date] = Field(
        None, description="The date when column value was last updated."
    )
    value: Optional[JSON] = Field(
        None, description="The column's raw value in JSON format."
    )
    typename__: Optional[Literal["CountryValue"]] = Field(
        "CountryValue", alias="__typename"
    )


class CreationLogValue(ColumnValue):
    board_id: Optional[ID] = Field(None, description="The board's unique identifier.")
    column: Optional[Column] = Field(
        None, description="The column that this value belongs to."
    )
    created_at: Optional[Date] = Field(
        None, description="The date when the item was created."
    )
    creator: Optional[User] = Field(None, description="User who created the item")
    creator_id: Optional[ID] = Field(
        None, description="ID of the user who created the item"
    )
    id: Optional[ID] = Field(None, description="The column's unique identifier.")
    item_id: Optional[ID] = Field(None, description="The item's unique identifier.")
    text: Optional[String] = None
    type: Optional[ColumnType] = Field(None, description="The column's type.")
    value: Optional[JSON] = Field(
        None, description="The column's raw value in JSON format."
    )
    typename__: Optional[Literal["CreationLogValue"]] = Field(
        "CreationLogValue", alias="__typename"
    )


class CustomFieldMetas(BaseModel):
    """
    The custom fields meta data for user profile.
    """

    description: Optional[String] = Field(
        None, description="The custom field meta's description."
    )
    editable: Optional[Boolean] = Field(
        None, description="Is the custom field meta editable or not."
    )
    field_type: Optional[String] = Field(
        None, description="The custom field meta's type."
    )
    flagged: Optional[Boolean] = Field(
        None, description="Is the custom field meta flagged or not."
    )
    icon: Optional[String] = Field(None, description="The custom field meta's icon.")
    id: Optional[String] = Field(
        None, description="The custom field meta's unique identifier."
    )
    position: Optional[String] = Field(
        None, description="The custom field meta's position in the user profile page."
    )
    title: Optional[String] = Field(None, description="The custom field meta's title.")
    typename__: Optional[Literal["CustomFieldMetas"]] = Field(
        "CustomFieldMetas", alias="__typename"
    )


class CustomFieldValue(BaseModel):
    """
    A custom field value for user profile.
    """

    custom_field_meta_id: Optional[String] = Field(
        None, description="The custom field value's meta unique identifier."
    )
    value: Optional[String] = Field(None, description="The custom field value.")
    typename__: Optional[Literal["CustomFieldValue"]] = Field(
        "CustomFieldValue", alias="__typename"
    )


class DateValue(ColumnValue):
    board_id: Optional[ID] = Field(None, description="The board's unique identifier.")
    column: Optional[Column] = Field(
        None, description="The column that this value belongs to."
    )
    date: Optional[String] = Field(None, description="The column's date value.")
    icon: Optional[String] = Field(
        None, description="The string representation of selected icon."
    )
    id: Optional[ID] = Field(None, description="The column's unique identifier.")
    item_id: Optional[ID] = Field(None, description="The item's unique identifier.")
    text: Optional[String] = Field(
        None, description="The formatted date and time in user time zone."
    )
    time: Optional[String] = Field(None, description="The column's time value.")
    type: Optional[ColumnType] = Field(None, description="The column's type.")
    updated_at: Optional[Date] = Field(
        None, description="The date when column value was last updated."
    )
    value: Optional[JSON] = Field(
        None, description="The column's raw value in JSON format."
    )
    typename__: Optional[Literal["DateValue"]] = Field("DateValue", alias="__typename")


class DependencyValue(ColumnValue):
    board_id: Optional[ID] = Field(None, description="The board's unique identifier.")
    column: Optional[Column] = Field(
        None, description="The column that this value belongs to."
    )
    display_value: Optional[String] = Field(
        None,
        description="A string representing all the names of the linked items, separated by commas",
    )
    id: Optional[ID] = Field(None, description="The column's unique identifier.")
    item_id: Optional[ID] = Field(None, description="The item's unique identifier.")
    linked_item_ids: Optional[List[ID]] = Field(
        None, description="The linked items ids"
    )
    linked_items: Optional[List[Item]] = Field(None, description="The linked items.")
    text: Optional[String] = Field(
        None,
        description="Text representation of the column value. Note: Not all columns support textual value",
    )
    type: Optional[ColumnType] = Field(None, description="The column's type.")
    updated_at: Optional[Date] = Field(
        None, description="The date when column value was last updated."
    )
    value: Optional[JSON] = Field(
        None, description="The column's raw value in JSON format."
    )
    typename__: Optional[Literal["DependencyValue"]] = Field(
        "DependencyValue", alias="__typename"
    )


class DocValue(ColumnValue):
    board_id: Optional[ID] = Field(None, description="The board's unique identifier.")
    column: Optional[Column] = Field(
        None, description="The column that this value belongs to."
    )
    file: Optional[FileDocValue] = Field(
        None, description="The document file attached to the column."
    )
    id: Optional[ID] = Field(None, description="The column's unique identifier.")
    item_id: Optional[ID] = Field(None, description="The item's unique identifier.")
    text: Optional[String] = Field(
        None,
        description="Text representation of the column value. Note: Not all columns support textual value",
    )
    type: Optional[ColumnType] = Field(None, description="The column's type.")
    value: Optional[JSON] = Field(
        None, description="The column's raw value in JSON format."
    )
    typename__: Optional[Literal["DocValue"]] = Field("DocValue", alias="__typename")


class Document(BaseModel):
    """
    A monday.com document.
    """

    blocks: Optional[List[Optional[DocumentBlock]]] = Field(
        None, description="The document's content blocks"
    )
    created_at: Optional[Date] = Field(
        None, description="The document's creation date."
    )
    created_by: Optional[User] = Field(None, description="The document's creator")
    doc_folder_id: Optional[ID] = Field(
        None,
        description="The document's folder unique identifier (null for first level).",
    )
    doc_kind: Optional[BoardKind] = Field(
        None, description="The document's kind (public / private / share)."
    )
    id: Optional[ID] = Field(None, description="The document's unique identifier.")
    name: Optional[String] = Field(None, description="The document's name.")
    object_id: Optional[ID] = Field(
        None, description="The associated board or object's unique identifier."
    )
    relative_url: Optional[String] = Field(
        None, description="The document's relative url"
    )
    settings: Optional[JSON] = Field(None, description="The document's settings.")
    url: Optional[String] = Field(None, description="The document's direct url")
    workspace: Optional[Workspace] = Field(
        None,
        description="The workspace that contains this document (null for main workspace).",
    )
    workspace_id: Optional[ID] = Field(
        None,
        description="The document's workspace unique identifier (null for main workspace).",
    )
    typename__: Optional[Literal["Document"]] = Field("Document", alias="__typename")


class DocumentBlock(BaseModel):
    """
    A monday.com document block.
    """

    content: Optional[JSON] = Field(None, description="The block's content.")
    created_at: Optional[Date] = Field(None, description="The block's creation date.")
    created_by: Optional[User] = Field(None, description="The block's creator")
    doc_id: Optional[ID] = Field(
        None, description="The block's document unique identifier."
    )
    id: Optional[String] = Field(None, description="The block's unique identifier.")
    parent_block_id: Optional[String] = Field(
        None, description="The block's parent block unique identifier."
    )
    position: Optional[Float] = Field(
        None, description="The block's position on the document."
    )
    type: Optional[String] = Field(None, description="The block content type.")
    updated_at: Optional[Date] = Field(
        None, description="The block's last updated date."
    )
    typename__: Optional[Literal["DocumentBlock"]] = Field(
        "DocumentBlock", alias="__typename"
    )


class DocumentBlockIdOnly(BaseModel):
    """
    A monday.com doc block.
    """

    id: Optional[String] = Field(None, description="The block's unique identifier.")
    typename__: Optional[Literal["DocumentBlockIdOnly"]] = Field(
        "DocumentBlockIdOnly", alias="__typename"
    )


class DropdownValue(ColumnValue):
    board_id: Optional[ID] = Field(None, description="The board's unique identifier.")
    column: Optional[Column] = Field(
        None, description="The column that this value belongs to."
    )
    id: Optional[ID] = Field(None, description="The column's unique identifier.")
    item_id: Optional[ID] = Field(None, description="The item's unique identifier.")
    text: Optional[String] = None
    type: Optional[ColumnType] = Field(None, description="The column's type.")
    value: Optional[JSON] = Field(
        None, description="The column's raw value in JSON format."
    )
    values: Optional[List[DropdownValueOption]] = Field(
        None, description="The selected dropdown values."
    )
    typename__: Optional[Literal["DropdownValue"]] = Field(
        "DropdownValue", alias="__typename"
    )


class DropdownValueOption(BaseModel):
    id: Optional[ID] = Field(None, description="The dropdown item's unique identifier.")
    label: Optional[String] = Field(None, description="The dropdown item's label.")
    typename__: Optional[Literal["DropdownValueOption"]] = Field(
        "DropdownValueOption", alias="__typename"
    )


class EmailValue(ColumnValue):
    board_id: Optional[ID] = Field(None, description="The board's unique identifier.")
    column: Optional[Column] = Field(
        None, description="The column that this value belongs to."
    )
    email: Optional[String] = Field(None, description="The column's email value.")
    id: Optional[ID] = Field(None, description="The column's unique identifier.")
    item_id: Optional[ID] = Field(None, description="The item's unique identifier.")
    label: Optional[String] = Field(
        None,
        description="The column's text value. It can be the same as email when user didn't enter any text.",
    )
    text: Optional[String] = Field(
        None,
        description="Text representation of the column value. Note: Not all columns support textual value",
    )
    type: Optional[ColumnType] = Field(None, description="The column's type.")
    updated_at: Optional[Date] = Field(
        None, description="The date when column value was last updated."
    )
    value: Optional[JSON] = Field(
        None, description="The column's raw value in JSON format."
    )
    typename__: Optional[Literal["EmailValue"]] = Field(
        "EmailValue", alias="__typename"
    )


class ExtendTrialPeriod(BaseModel):
    """
    Result of a single operation
    """

    account_slug: Optional[String] = Field(None, description="Account slug")
    reason: Optional[String] = Field(None, description="Reason of an error")
    success: Optional[Boolean] = Field(None, description="Result of a single operation")
    typename__: Optional[Literal["ExtendTrialPeriod"]] = Field(
        "ExtendTrialPeriod", alias="__typename"
    )


class FileAssetValue(BaseModel):
    asset: Optional[Asset] = Field(
        None, description="The asset associated with the file."
    )
    asset_id: Optional[ID] = Field(None, description="The asset's id.")
    created_at: Optional[Date] = Field(None, description="The file's creation date.")
    creator: Optional[User] = Field(None, description="The user who created the file.")
    creator_id: Optional[ID] = Field(
        None, description="The ID of user who created the file."
    )
    is_image: Optional[Boolean] = Field(
        None, description="Whether the file is an image."
    )
    name: Optional[String] = Field(None, description="The file's name.")
    typename__: Optional[Literal["FileAssetValue"]] = Field(
        "FileAssetValue", alias="__typename"
    )


class FileDocValue(BaseModel):
    created_at: Optional[Date] = Field(None, description="The file's creation date.")
    creator: Optional[User] = Field(None, description="The user who created the file.")
    creator_id: Optional[ID] = Field(
        None, description="The ID of user who created the file."
    )
    doc: Optional[Document] = Field(
        None, description="The doc associated with the file."
    )
    file_id: Optional[ID] = Field(None, description="The file's unique identifier.")
    object_id: Optional[ID] = Field(
        None, description="The associated board or object's unique identifier."
    )
    url: Optional[String] = Field(None, description="The file's url.")
    typename__: Optional[Literal["FileDocValue"]] = Field(
        "FileDocValue", alias="__typename"
    )


class FileLinkValue(BaseModel):
    created_at: Optional[Date] = Field(None, description="The file's creation date.")
    creator: Optional[User] = Field(None, description="The user who created the file.")
    creator_id: Optional[ID] = Field(
        None, description="The ID of user who created the file."
    )
    file_id: Optional[ID] = Field(None, description="The file's id.")
    kind: Optional[FileLinkValueKind] = Field(None, description="The file's kind.")
    name: Optional[String] = Field(None, description="The file's name.")
    url: Optional[String] = Field(None, description="The file's url.")
    typename__: Optional[Literal["FileLinkValue"]] = Field(
        "FileLinkValue", alias="__typename"
    )


class FileValue(ColumnValue):
    board_id: Optional[ID] = Field(None, description="The board's unique identifier.")
    column: Optional[Column] = Field(
        None, description="The column that this value belongs to."
    )
    files: Optional[List[FileValueItem]] = Field(
        None, description="The files attached to the column."
    )
    id: Optional[ID] = Field(None, description="The column's unique identifier.")
    item_id: Optional[ID] = Field(None, description="The item's unique identifier.")
    text: Optional[String] = None
    type: Optional[ColumnType] = Field(None, description="The column's type.")
    value: Optional[JSON] = Field(
        None, description="The column's raw value in JSON format."
    )
    typename__: Optional[Literal["FileValue"]] = Field("FileValue", alias="__typename")


class Folder(BaseModel):
    """
    A workspace folder containing boards, docs, sub folders, etc.
    """

    children: Optional[List[Optional[Board]]] = Field(
        None,
        description="The various items in the folder, not including sub-folders and dashboards.",
    )
    color: Optional[FolderColor] = Field(None, description="The folder's color.")
    created_at: Optional[Date] = Field(None, description="The folder's creation date.")
    custom_icon: Optional[FolderCustomIcon] = Field(
        None, description="The folder's custom icon."
    )
    font_weight: Optional[FolderFontWeight] = Field(
        None, description="The folder's font weight."
    )
    id: Optional[ID] = Field(None, description="The folder's unique identifier.")
    name: Optional[String] = Field(None, description="The folder's name.")
    owner_id: Optional[ID] = Field(
        None, description="The folder's user owner unique identifier."
    )
    parent: Optional[Folder] = Field(None, description="The folder's parent folder.")
    sub_folders: Optional[List[Optional[Folder]]] = Field(
        None, description="Sub-folders inside this folder."
    )
    workspace: Optional[Workspace] = Field(
        None,
        description="The workspace that contains this folder (null id for main workspace).",
    )
    typename__: Optional[Literal["Folder"]] = Field("Folder", alias="__typename")


class FormulaValue(ColumnValue):
    board_id: Optional[ID] = Field(None, description="The board's unique identifier.")
    column: Optional[Column] = Field(
        None, description="The column that this value belongs to."
    )
    id: Optional[ID] = Field(None, description="The column's unique identifier.")
    item_id: Optional[ID] = Field(None, description="The item's unique identifier.")
    text: Optional[String] = Field(
        None,
        description="Text representation of the column value. Note: Not all columns support textual value",
    )
    type: Optional[ColumnType] = Field(None, description="The column's type.")
    value: Optional[JSON] = Field(
        None, description="The column's raw value in JSON format."
    )
    typename__: Optional[Literal["FormulaValue"]] = Field(
        "FormulaValue", alias="__typename"
    )


class Group(BaseModel):
    """
    A group of items in a board.
    """

    archived: Optional[Boolean] = Field(
        None, description="Is the group archived or not."
    )
    color: Optional[String] = Field(None, description="The group's color.")
    deleted: Optional[Boolean] = Field(None, description="Is the group deleted or not.")
    id: Optional[ID] = Field(None, description="The group's unique identifier.")
    items_page: Optional[ItemsResponse] = Field(
        None, description="The items in the group."
    )
    position: Optional[String] = Field(
        None, description="The group's position in the board."
    )
    title: Optional[String] = Field(None, description="The group's title.")
    typename__: Optional[Literal["Group"]] = Field("Group", alias="__typename")


class GroupValue(ColumnValue):
    board_id: Optional[ID] = Field(None, description="The board's unique identifier.")
    column: Optional[Column] = Field(
        None, description="The column that this value belongs to."
    )
    group: Optional[Group] = Field(None, description="The group value.")
    group_id: Optional[ID] = Field(None, description="The group identifier.")
    id: Optional[ID] = Field(None, description="The column's unique identifier.")
    item_id: Optional[ID] = Field(None, description="The item's unique identifier.")
    text: Optional[String] = Field(
        None,
        description="Text representation of the column value. Note: Not all columns support textual value",
    )
    type: Optional[ColumnType] = Field(None, description="The column's type.")
    value: Optional[JSON] = Field(
        None, description="The column's raw value in JSON format."
    )
    typename__: Optional[Literal["GroupValue"]] = Field(
        "GroupValue", alias="__typename"
    )


class HourValue(ColumnValue):
    board_id: Optional[ID] = Field(None, description="The board's unique identifier.")
    column: Optional[Column] = Field(
        None, description="The column that this value belongs to."
    )
    hour: Optional[Int] = Field(None, description="Hour")
    id: Optional[ID] = Field(None, description="The column's unique identifier.")
    item_id: Optional[ID] = Field(None, description="The item's unique identifier.")
    minute: Optional[Int] = Field(None, description="Minute")
    text: Optional[String] = None
    type: Optional[ColumnType] = Field(None, description="The column's type.")
    updated_at: Optional[Date] = Field(
        None, description="The date when column value was last updated."
    )
    value: Optional[JSON] = Field(
        None, description="The column's raw value in JSON format."
    )
    typename__: Optional[Literal["HourValue"]] = Field("HourValue", alias="__typename")


class IntegrationValue(ColumnValue):
    board_id: Optional[ID] = Field(None, description="The board's unique identifier.")
    column: Optional[Column] = Field(
        None, description="The column that this value belongs to."
    )
    entity_id: Optional[ID] = Field(None, description="ID of the entity")
    id: Optional[ID] = Field(None, description="The column's unique identifier.")
    issue_api_url: Optional[ID] = Field(None, description="URL of the issue")
    issue_id: Optional[String] = Field(None, description="ID of the issue")
    item_id: Optional[ID] = Field(None, description="The item's unique identifier.")
    text: Optional[String] = Field(
        None,
        description="Text representation of the column value. Note: Not all columns support textual value",
    )
    type: Optional[ColumnType] = Field(None, description="The column's type.")
    value: Optional[JSON] = Field(
        None, description="The column's raw value in JSON format."
    )
    typename__: Optional[Literal["IntegrationValue"]] = Field(
        "IntegrationValue", alias="__typename"
    )


class Item(BaseModel):
    """
    An item (table row).
    """

    assets: Optional[List[Optional[Asset]]] = Field(
        None, description="The item's assets/files."
    )
    board: Optional[Board] = Field(
        None, description="The board that contains this item."
    )
    column_values: Optional[List[ColumnValue]] = Field(
        None, description="The item's column values."
    )
    created_at: Optional[Date] = Field(None, description="The item's create date.")
    creator: Optional[User] = Field(None, description="The item's creator.")
    creator_id: Optional[String] = Field(
        None, description="The unique identifier of the item creator."
    )
    email: Optional[String] = Field(None, description="The item's email.")
    group: Optional[Group] = Field(
        None, description="The group that contains this item."
    )
    id: Optional[ID] = Field(None, description="The item's unique identifier.")
    linked_items: Optional[List[Item]] = Field(
        None, description="The item's linked items"
    )
    name: Optional[String] = Field(None, description="The item's name.")
    parent_item: Optional[Item] = Field(
        None, description="The parent item of a subitem."
    )
    relative_link: Optional[String] = Field(
        None, description="The item's relative path"
    )
    state: Optional[State] = Field(
        None, description="The item's state (all / active / archived / deleted)."
    )
    subitems: Optional[List[Optional[Item]]] = Field(
        None, description="The item's subitems."
    )
    subscribers: Optional[List[Optional[User]]] = Field(
        None, description="The pulses's subscribers."
    )
    updated_at: Optional[Date] = Field(None, description="The item's last update date.")
    updates: Optional[List[Optional[Update]]] = Field(
        None, description="The item's updates."
    )
    url: Optional[String] = Field(None, description="The item's link")
    typename__: Optional[Literal["Item"]] = Field("Item", alias="__typename")


class ItemIdValue(ColumnValue):
    board_id: Optional[ID] = Field(None, description="The board's unique identifier.")
    column: Optional[Column] = Field(
        None, description="The column that this value belongs to."
    )
    id: Optional[ID] = Field(None, description="The column's unique identifier.")
    item_id: Optional[ID] = Field(None, description="ID of the item")
    text: Optional[String] = None
    type: Optional[ColumnType] = Field(None, description="The column's type.")
    value: Optional[JSON] = Field(
        None, description="The column's raw value in JSON format."
    )
    typename__: Optional[Literal["ItemIdValue"]] = Field(
        "ItemIdValue", alias="__typename"
    )


class ItemsResponse(BaseModel):
    cursor: Optional[String] = Field(
        None,
        description="An opaque cursor that represents the position in the list after the last\nreturned item. Use this cursor for pagination to fetch the next set of items.\nIf the cursor is null, there are no more items to fetch.",
    )
    items: Optional[List[Item]] = Field(
        None, description="The items associated with the cursor."
    )
    typename__: Optional[Literal["ItemsResponse"]] = Field(
        "ItemsResponse", alias="__typename"
    )


class LastUpdatedValue(ColumnValue):
    board_id: Optional[ID] = Field(None, description="The board's unique identifier.")
    column: Optional[Column] = Field(
        None, description="The column that this value belongs to."
    )
    id: Optional[ID] = Field(None, description="The column's unique identifier.")
    item_id: Optional[ID] = Field(None, description="The item's unique identifier.")
    text: Optional[String] = None
    type: Optional[ColumnType] = Field(None, description="The column's type.")
    updated_at: Optional[Date] = Field(
        None, description="Timestamp of the last time the item was updated"
    )
    updater: Optional[User] = Field(None, description="User who updated the item")
    updater_id: Optional[ID] = Field(
        None, description="ID of the user who updated the item"
    )
    value: Optional[JSON] = Field(
        None, description="The column's raw value in JSON format."
    )
    typename__: Optional[Literal["LastUpdatedValue"]] = Field(
        "LastUpdatedValue", alias="__typename"
    )


class LinkValue(ColumnValue):
    board_id: Optional[ID] = Field(None, description="The board's unique identifier.")
    column: Optional[Column] = Field(
        None, description="The column that this value belongs to."
    )
    id: Optional[ID] = Field(None, description="The column's unique identifier.")
    item_id: Optional[ID] = Field(None, description="The item's unique identifier.")
    text: Optional[String] = None
    type: Optional[ColumnType] = Field(None, description="The column's type.")
    updated_at: Optional[Date] = Field(
        None, description="The date when column value was last updated."
    )
    url: Optional[String] = Field(None, description="Url")
    url_text: Optional[String] = Field(None, description="Url text")
    value: Optional[JSON] = Field(
        None, description="The column's raw value in JSON format."
    )
    typename__: Optional[Literal["LinkValue"]] = Field("LinkValue", alias="__typename")


class LocationValue(ColumnValue):
    address: Optional[String] = Field(None, description="Address")
    board_id: Optional[ID] = Field(None, description="The board's unique identifier.")
    city: Optional[String] = Field(None, description="City")
    city_short: Optional[String] = Field(None, description="City")
    column: Optional[Column] = Field(
        None, description="The column that this value belongs to."
    )
    country: Optional[String] = Field(None, description="Country")
    country_short: Optional[String] = Field(
        None, description="Country short name (e.g. PE for Peru)"
    )
    id: Optional[ID] = Field(None, description="The column's unique identifier.")
    item_id: Optional[ID] = Field(None, description="The item's unique identifier.")
    lat: Optional[Float] = Field(None, description="Latitude")
    lng: Optional[Float] = Field(None, description="Longitude")
    place_id: Optional[String] = Field(None, description="Place ID of the location")
    street: Optional[String] = Field(None, description="Street")
    street_number: Optional[String] = Field(
        None, description="Number of building in the street"
    )
    street_number_short: Optional[String] = Field(
        None, description="Short number of building in the street"
    )
    street_short: Optional[String] = Field(None, description="Street")
    text: Optional[String] = None
    type: Optional[ColumnType] = Field(None, description="The column's type.")
    updated_at: Optional[Date] = Field(
        None, description="The date when column value was last updated."
    )
    value: Optional[JSON] = Field(
        None, description="The column's raw value in JSON format."
    )
    typename__: Optional[Literal["LocationValue"]] = Field(
        "LocationValue", alias="__typename"
    )


class LongTextValue(ColumnValue):
    board_id: Optional[ID] = Field(None, description="The board's unique identifier.")
    column: Optional[Column] = Field(
        None, description="The column that this value belongs to."
    )
    id: Optional[ID] = Field(None, description="The column's unique identifier.")
    item_id: Optional[ID] = Field(None, description="The item's unique identifier.")
    text: Optional[String] = Field(
        None,
        description="Text representation of the column value. Note: Not all columns support textual value",
    )
    type: Optional[ColumnType] = Field(None, description="The column's type.")
    updated_at: Optional[Date] = Field(
        None, description="The date when column value was last updated."
    )
    value: Optional[JSON] = Field(
        None, description="The column's raw value in JSON format."
    )
    typename__: Optional[Literal["LongTextValue"]] = Field(
        "LongTextValue", alias="__typename"
    )


class MirrorValue(ColumnValue):
    board_id: Optional[ID] = Field(None, description="The board's unique identifier.")
    column: Optional[Column] = Field(
        None, description="The column that this value belongs to."
    )
    display_value: Optional[String] = Field(
        None,
        description="A string representing all the names of the linked items, separated by commas",
    )
    id: Optional[ID] = Field(None, description="The column's unique identifier.")
    item_id: Optional[ID] = Field(None, description="The item's unique identifier.")
    mirrored_items: Optional[List[MirroredItem]] = Field(
        None, description="The mirrored items."
    )
    text: Optional[String] = Field(
        None,
        description="Text representation of the column value. Note: Not all columns support textual value",
    )
    type: Optional[ColumnType] = Field(None, description="The column's type.")
    value: Optional[JSON] = Field(
        None, description="The column's raw value in JSON format."
    )
    typename__: Optional[Literal["MirrorValue"]] = Field(
        "MirrorValue", alias="__typename"
    )


class MirroredItem(BaseModel):
    linked_board: Optional[Board] = Field(None, description="The linked board.")
    linked_board_id: Optional[ID] = Field(
        None, description="The linked board's unique identifier."
    )
    linked_item: Optional[Item] = Field(None, description="The linked item.")
    mirrored_value: Optional[MirroredValue] = Field(
        None, description="The mirrored values."
    )
    typename__: Optional[Literal["MirroredItem"]] = Field(
        "MirroredItem", alias="__typename"
    )


class Notification(BaseModel):
    """
    A notification.
    """

    id: Optional[ID] = Field(None, description="The notification's unique identifier.")
    text: Optional[String] = Field(None, description="The notification text.")
    typename__: Optional[Literal["Notification"]] = Field(
        "Notification", alias="__typename"
    )


class NumbersValue(ColumnValue):
    board_id: Optional[ID] = Field(None, description="The board's unique identifier.")
    column: Optional[Column] = Field(
        None, description="The column that this value belongs to."
    )
    direction: Optional[NumberValueUnitDirection] = Field(
        None,
        description="Indicates where the symbol should be placed - on the right or left of the number",
    )
    id: Optional[ID] = Field(None, description="The column's unique identifier.")
    item_id: Optional[ID] = Field(None, description="The item's unique identifier.")
    number: Optional[Float] = Field(None, description="Number")
    symbol: Optional[String] = Field(None, description="The symbol of the unit")
    text: Optional[String] = None
    type: Optional[ColumnType] = Field(None, description="The column's type.")
    value: Optional[JSON] = Field(
        None, description="The column's raw value in JSON format."
    )
    typename__: Optional[Literal["NumbersValue"]] = Field(
        "NumbersValue", alias="__typename"
    )


class OutOfOffice(BaseModel):
    """
    The working status of a user.
    """

    active: Optional[Boolean] = Field(None, description="Is the status active?")
    disable_notifications: Optional[Boolean] = Field(
        None, description="Are notification disabled?"
    )
    end_date: Optional[Date] = Field(None, description="The status end date.")
    start_date: Optional[Date] = Field(None, description="The status start date.")
    type: Optional[String] = Field(None, description="Out of office type.")
    typename__: Optional[Literal["OutOfOffice"]] = Field(
        "OutOfOffice", alias="__typename"
    )


class PeopleEntity(BaseModel):
    id: Optional[ID] = Field(None, description="Id of the entity: a person or a team")
    kind: Optional[Kind] = Field(None, description="Type of entity")
    typename__: Optional[Literal["PeopleEntity"]] = Field(
        "PeopleEntity", alias="__typename"
    )


class PeopleValue(ColumnValue):
    board_id: Optional[ID] = Field(None, description="The board's unique identifier.")
    column: Optional[Column] = Field(
        None, description="The column that this value belongs to."
    )
    id: Optional[ID] = Field(None, description="The column's unique identifier.")
    item_id: Optional[ID] = Field(None, description="The item's unique identifier.")
    persons_and_teams: Optional[List[PeopleEntity]] = Field(
        None, description="The people and teams assigned to the item."
    )
    text: Optional[String] = None
    type: Optional[ColumnType] = Field(None, description="The column's type.")
    updated_at: Optional[Date] = Field(
        None, description="The date when column value was last updated."
    )
    value: Optional[JSON] = Field(
        None, description="The column's raw value in JSON format."
    )
    typename__: Optional[Literal["PeopleValue"]] = Field(
        "PeopleValue", alias="__typename"
    )


class PersonValue(ColumnValue):
    board_id: Optional[ID] = Field(None, description="The board's unique identifier.")
    column: Optional[Column] = Field(
        None, description="The column that this value belongs to."
    )
    id: Optional[ID] = Field(None, description="The column's unique identifier.")
    item_id: Optional[ID] = Field(None, description="The item's unique identifier.")
    person_id: Optional[ID] = Field(
        None, description="The person assigned to the item."
    )
    text: Optional[String] = None
    type: Optional[ColumnType] = Field(None, description="The column's type.")
    updated_at: Optional[Date] = Field(
        None, description="The date when column value was last updated."
    )
    value: Optional[JSON] = Field(
        None, description="The column's raw value in JSON format."
    )
    typename__: Optional[Literal["PersonValue"]] = Field(
        "PersonValue", alias="__typename"
    )


class PhoneValue(ColumnValue):
    board_id: Optional[ID] = Field(None, description="The board's unique identifier.")
    column: Optional[Column] = Field(
        None, description="The column that this value belongs to."
    )
    country_short_name: Optional[String] = Field(None, description="ISO-2 country code")
    id: Optional[ID] = Field(None, description="The column's unique identifier.")
    item_id: Optional[ID] = Field(None, description="The item's unique identifier.")
    phone: Optional[String] = Field(None, description="Phone number")
    text: Optional[String] = None
    type: Optional[ColumnType] = Field(None, description="The column's type.")
    updated_at: Optional[Date] = Field(
        None, description="The date when column value was last updated."
    )
    value: Optional[JSON] = Field(
        None, description="The column's raw value in JSON format."
    )
    typename__: Optional[Literal["PhoneValue"]] = Field(
        "PhoneValue", alias="__typename"
    )


class Plan(BaseModel):
    """
    A payment plan.
    """

    max_users: Optional[Int] = Field(
        None, description="The maximum users allowed in the plan."
    )
    period: Optional[String] = Field(None, description="The plan's time period.")
    tier: Optional[String] = Field(None, description="The plan's tier.")
    version: Optional[Int] = Field(None, description="The plan's version.")
    typename__: Optional[Literal["Plan"]] = Field("Plan", alias="__typename")


class ProgressValue(ColumnValue):
    board_id: Optional[ID] = Field(None, description="The board's unique identifier.")
    column: Optional[Column] = Field(
        None, description="The column that this value belongs to."
    )
    id: Optional[ID] = Field(None, description="The column's unique identifier.")
    item_id: Optional[ID] = Field(None, description="The item's unique identifier.")
    text: Optional[String] = Field(
        None,
        description="Text representation of the column value. Note: Not all columns support textual value",
    )
    type: Optional[ColumnType] = Field(None, description="The column's type.")
    value: Optional[JSON] = Field(
        None, description="The column's raw value in JSON format."
    )
    typename__: Optional[Literal["ProgressValue"]] = Field(
        "ProgressValue", alias="__typename"
    )


class RatingValue(ColumnValue):
    board_id: Optional[ID] = Field(None, description="The board's unique identifier.")
    column: Optional[Column] = Field(
        None, description="The column that this value belongs to."
    )
    id: Optional[ID] = Field(None, description="The column's unique identifier.")
    item_id: Optional[ID] = Field(None, description="The item's unique identifier.")
    rating: Optional[Int] = Field(None, description="Rating value")
    text: Optional[String] = None
    type: Optional[ColumnType] = Field(None, description="The column's type.")
    updated_at: Optional[Date] = Field(
        None, description="The date when column value was last updated."
    )
    value: Optional[JSON] = Field(
        None, description="The column's raw value in JSON format."
    )
    typename__: Optional[Literal["RatingValue"]] = Field(
        "RatingValue", alias="__typename"
    )


class Reply(BaseModel):
    """
    A reply for an update.
    """

    body: Optional[String] = Field(None, description="The reply's html formatted body.")
    created_at: Optional[Date] = Field(None, description="The reply's creation date.")
    creator: Optional[User] = Field(None, description="The reply's creator.")
    creator_id: Optional[String] = Field(
        None, description="The unique identifier of the reply creator."
    )
    id: Optional[ID] = Field(None, description="The reply's unique identifier.")
    text_body: Optional[String] = Field(None, description="The reply's text body.")
    updated_at: Optional[Date] = Field(None, description="The reply's last edit date.")
    typename__: Optional[Literal["Reply"]] = Field("Reply", alias="__typename")


class StatusLabelStyle(BaseModel):
    """
    A status label style.
    """

    border: Optional[String] = Field(
        None, description="The label's border color in hex format."
    )
    color: Optional[String] = Field(
        None, description="The label's color in hex format."
    )
    typename__: Optional[Literal["StatusLabelStyle"]] = Field(
        "StatusLabelStyle", alias="__typename"
    )


class StatusValue(ColumnValue):
    board_id: Optional[ID] = Field(None, description="The board's unique identifier.")
    column: Optional[Column] = Field(
        None, description="The column that this value belongs to."
    )
    id: Optional[ID] = Field(None, description="The column's unique identifier.")
    index: Optional[Int] = Field(
        None, description="The index of the status in the board"
    )
    is_done: Optional[Boolean] = Field(None, description="Whether the status is done")
    item_id: Optional[ID] = Field(None, description="The item's unique identifier.")
    label: Optional[String] = Field(None, description="The label of the status")
    label_style: Optional[StatusLabelStyle] = Field(
        None, description="The style of the status label"
    )
    text: Optional[String] = None
    type: Optional[ColumnType] = Field(None, description="The column's type.")
    update_id: Optional[ID] = Field(
        None, description="The ID of an update attached to the status"
    )
    updated_at: Optional[Date] = Field(
        None, description="The date when column value was last updated."
    )
    value: Optional[JSON] = Field(
        None, description="The column's raw value in JSON format."
    )
    typename__: Optional[Literal["StatusValue"]] = Field(
        "StatusValue", alias="__typename"
    )


class SubtasksValue(ColumnValue):
    board_id: Optional[ID] = Field(None, description="The board's unique identifier.")
    column: Optional[Column] = Field(
        None, description="The column that this value belongs to."
    )
    display_value: Optional[String] = Field(
        None,
        description="A string representing all the names of the subtasks, separated by commas",
    )
    id: Optional[ID] = Field(None, description="The column's unique identifier.")
    item_id: Optional[ID] = Field(None, description="The item's unique identifier.")
    subitems: Optional[List[Item]] = Field(None, description="The subitems")
    subitems_ids: Optional[List[ID]] = Field(None, description="The subitems IDs")
    text: Optional[String] = Field(
        None,
        description="Text representation of the column value. Note: Not all columns support textual value",
    )
    type: Optional[ColumnType] = Field(None, description="The column's type.")
    value: Optional[JSON] = Field(
        None, description="The column's raw value in JSON format."
    )
    typename__: Optional[Literal["SubtasksValue"]] = Field(
        "SubtasksValue", alias="__typename"
    )


class Tag(BaseModel):
    """
    A tag
    """

    color: Optional[String] = Field(None, description="The tag's color.")
    id: Optional[ID] = Field(None, description="The tag's unique identifier.")
    name: Optional[String] = Field(None, description="The tag's name.")
    typename__: Optional[Literal["Tag"]] = Field("Tag", alias="__typename")


class TagsValue(ColumnValue):
    board_id: Optional[ID] = Field(None, description="The board's unique identifier.")
    column: Optional[Column] = Field(
        None, description="The column that this value belongs to."
    )
    id: Optional[ID] = Field(None, description="The column's unique identifier.")
    item_id: Optional[ID] = Field(None, description="The item's unique identifier.")
    tag_ids: Optional[List[Int]] = Field(None, description="Tag ID's")
    tags: Optional[List[Tag]] = Field(None, description="A list of tags")
    text: Optional[String] = None
    type: Optional[ColumnType] = Field(None, description="The column's type.")
    value: Optional[JSON] = Field(
        None, description="The column's raw value in JSON format."
    )
    typename__: Optional[Literal["TagsValue"]] = Field("TagsValue", alias="__typename")


class Team(BaseModel):
    """
    A team of users.
    """

    id: Optional[ID] = Field(None, description="The team's unique identifier.")
    name: Optional[String] = Field(None, description="The team's name.")
    owners: Optional[List[User]] = Field(
        None, description="The users who are the owners of the team."
    )
    picture_url: Optional[String] = Field(None, description="The team's picture url.")
    users: Optional[List[Optional[User]]] = Field(
        None, description="The users in the team."
    )
    typename__: Optional[Literal["Team"]] = Field("Team", alias="__typename")


class TeamValue(ColumnValue):
    board_id: Optional[ID] = Field(None, description="The board's unique identifier.")
    column: Optional[Column] = Field(
        None, description="The column that this value belongs to."
    )
    id: Optional[ID] = Field(None, description="The column's unique identifier.")
    item_id: Optional[ID] = Field(None, description="The item's unique identifier.")
    team_id: Optional[Int] = Field(None, description="ID of the assigned team")
    text: Optional[String] = None
    type: Optional[ColumnType] = Field(None, description="The column's type.")
    updated_at: Optional[Date] = Field(
        None, description="The date when column value was last updated."
    )
    value: Optional[JSON] = Field(
        None, description="The column's raw value in JSON format."
    )
    typename__: Optional[Literal["TeamValue"]] = Field("TeamValue", alias="__typename")


class Template(BaseModel):
    """
    A monday.com template.
    """

    process_id: Optional[String] = Field(
        None, description="The template process unique identifier for async operations."
    )
    typename__: Optional[Literal["Template"]] = Field("Template", alias="__typename")


class TextValue(ColumnValue):
    board_id: Optional[ID] = Field(None, description="The board's unique identifier.")
    column: Optional[Column] = Field(
        None, description="The column that this value belongs to."
    )
    id: Optional[ID] = Field(None, description="The column's unique identifier.")
    item_id: Optional[ID] = Field(None, description="The item's unique identifier.")
    text: Optional[String] = Field(None, description="The column's textual value")
    type: Optional[ColumnType] = Field(None, description="The column's type.")
    value: Optional[JSON] = Field(
        None, description="The column's raw value in JSON format."
    )
    typename__: Optional[Literal["TextValue"]] = Field("TextValue", alias="__typename")


class TimeTrackingHistoryItem(BaseModel):
    created_at: Optional[Date] = Field(
        None, description="When the session was added to the cell"
    )
    ended_at: Optional[Date] = Field(
        None, description="Only applicable if the session has ended"
    )
    ended_user_id: Optional[ID] = Field(
        None, description="The identifier of an user which ended the tracking"
    )
    id: Optional[ID] = Field(None, description="A unique session identifier")
    manually_entered_end_date: Optional[Boolean] = Field(
        None, description="Is true if the session end date was manually entered"
    )
    manually_entered_end_time: Optional[Boolean] = Field(
        None, description="Is true if the session end time was manually entered"
    )
    manually_entered_start_date: Optional[Boolean] = Field(
        None, description="Is true if the session start date was manually entered"
    )
    manually_entered_start_time: Optional[Boolean] = Field(
        None, description="Is true if the session start time was manually entered"
    )
    started_at: Optional[Date] = Field(
        None,
        description="Only applicable if the session was added by pressing the play button or via automation",
    )
    started_user_id: Optional[ID] = Field(
        None, description="The identifier of an user which started the tracking"
    )
    status: Optional[String] = Field(None, description="The status of the session")
    updated_at: Optional[Date] = Field(None, description="When the session was updated")
    typename__: Optional[Literal["TimeTrackingHistoryItem"]] = Field(
        "TimeTrackingHistoryItem", alias="__typename"
    )


class TimeTrackingValue(ColumnValue):
    board_id: Optional[ID] = Field(None, description="The board's unique identifier.")
    column: Optional[Column] = Field(
        None, description="The column that this value belongs to."
    )
    duration: Optional[Int] = Field(
        None, description="Total duration of the time tracker"
    )
    history: Optional[List[TimeTrackingHistoryItem]] = None
    id: Optional[ID] = Field(None, description="The column's unique identifier.")
    item_id: Optional[ID] = Field(None, description="The item's unique identifier.")
    running: Optional[Boolean] = Field(
        None, description="Whether the time tracker is running"
    )
    started_at: Optional[Date] = Field(
        None, description="The date when the time tracker was started"
    )
    text: Optional[String] = None
    type: Optional[ColumnType] = Field(None, description="The column's type.")
    updated_at: Optional[Date] = Field(
        None, description="The date when column value was last updated."
    )
    value: Optional[JSON] = None
    typename__: Optional[Literal["TimeTrackingValue"]] = Field(
        "TimeTrackingValue", alias="__typename"
    )


class TimelineValue(ColumnValue):
    board_id: Optional[ID] = Field(None, description="The board's unique identifier.")
    column: Optional[Column] = Field(
        None, description="The column that this value belongs to."
    )
    from_: Optional[Date] = Field(
        None, alias="from", description="The start date of the timeline"
    )
    id: Optional[ID] = Field(None, description="The column's unique identifier.")
    item_id: Optional[ID] = Field(None, description="The item's unique identifier.")
    text: Optional[String] = Field(
        None, description="The range of dates representing the timeline (YYYY-MM-DD)"
    )
    to: Optional[Date] = Field(None, description="The end date of the timeline")
    type: Optional[ColumnType] = Field(None, description="The column's type.")
    updated_at: Optional[Date] = Field(
        None, description="The date when column value was last updated."
    )
    value: Optional[JSON] = Field(
        None, description="The column's raw value in JSON format."
    )
    visualization_type: Optional[String] = Field(
        None, description="The visualization type for the timeline"
    )
    typename__: Optional[Literal["TimelineValue"]] = Field(
        "TimelineValue", alias="__typename"
    )


class UnsupportedValue(ColumnValue):
    board_id: Optional[ID] = Field(None, description="The board's unique identifier.")
    column: Optional[Column] = Field(
        None, description="The column that this value belongs to."
    )
    id: Optional[ID] = Field(None, description="The column's unique identifier.")
    item_id: Optional[ID] = Field(None, description="The item's unique identifier.")
    text: Optional[String] = Field(
        None,
        description="Text representation of the column value. Note: Not all columns support textual value",
    )
    type: Optional[ColumnType] = Field(None, description="The column's type.")
    value: Optional[JSON] = Field(
        None, description="The column's raw value in JSON format."
    )
    typename__: Optional[Literal["UnsupportedValue"]] = Field(
        "UnsupportedValue", alias="__typename"
    )


class Update(BaseModel):
    """
    An update.
    """

    assets: Optional[List[Optional[Asset]]] = Field(
        None, description="The update's assets/files."
    )
    body: Optional[String] = Field(
        None, description="The update's html formatted body."
    )
    created_at: Optional[Date] = Field(None, description="The update's creation date.")
    creator: Optional[User] = Field(None, description="The update's creator.")
    creator_id: Optional[String] = Field(
        None, description="The unique identifier of the update creator."
    )
    id: Optional[ID] = Field(None, description="The update's unique identifier.")
    item_id: Optional[String] = Field(None, description="The update's item ID.")
    replies: Optional[List[Optional[Reply]]] = Field(
        None, description="The update's replies."
    )
    text_body: Optional[String] = Field(None, description="The update's text body.")
    updated_at: Optional[Date] = Field(None, description="The update's last edit date.")
    typename__: Optional[Literal["Update"]] = Field("Update", alias="__typename")


class User(BaseModel):
    """
    A monday.com user.
    """

    account: Optional[Account] = Field(None, description="The user's account.")
    birthday: Optional[Date] = Field(None, description="The user's birthday.")
    country_code: Optional[String] = Field(None, description="The user's country code.")
    created_at: Optional[Date] = Field(None, description="The user's creation date.")
    current_language: Optional[String] = Field(
        None, description="The current user's language"
    )
    custom_field_metas: Optional[List[Optional[CustomFieldMetas]]] = Field(
        None, description="The custom field metas of the user profile."
    )
    custom_field_values: Optional[List[Optional[CustomFieldValue]]] = Field(
        None, description="The custom field values of the user profile."
    )
    email: Optional[String] = Field(None, description="The user's email.")
    enabled: Optional[Boolean] = Field(None, description="Is the user enabled or not.")
    id: Optional[ID] = Field(None, description="The user's unique identifier.")
    is_admin: Optional[Boolean] = Field(
        None, description="Is the user an account admin."
    )
    is_guest: Optional[Boolean] = Field(None, description="Is the user a guest or not.")
    is_pending: Optional[Boolean] = Field(
        None, description="Is the user a pending user"
    )
    is_verified: Optional[Boolean] = Field(
        None, description="Is user verified his email."
    )
    is_view_only: Optional[Boolean] = Field(
        None, description="Is the user a view only user or not."
    )
    join_date: Optional[Date] = Field(
        None, description="The date the user joined the account."
    )
    last_activity: Optional[Date] = Field(
        None, description="Last date & time when user was active"
    )
    location: Optional[String] = Field(None, description="The user's location.")
    mobile_phone: Optional[String] = Field(
        None, description="The user's mobile phone number."
    )
    name: Optional[String] = Field(None, description="The user's name.")
    out_of_office: Optional[OutOfOffice] = Field(
        None, description="The user's out of office status."
    )
    phone: Optional[String] = Field(None, description="The user's phone number.")
    photo_original: Optional[String] = Field(
        None, description="The user's photo in the original size."
    )
    photo_small: Optional[String] = Field(
        None, description="The user's photo in small size (150x150)."
    )
    photo_thumb: Optional[String] = Field(
        None, description="The user's photo in thumbnail size (100x100)."
    )
    photo_thumb_small: Optional[String] = Field(
        None, description="The user's photo in small thumbnail size (50x50)."
    )
    photo_tiny: Optional[String] = Field(
        None, description="The user's photo in tiny size (30x30)."
    )
    sign_up_product_kind: Optional[String] = Field(
        None, description="The product to which the user signed up to first."
    )
    teams: Optional[List[Optional[Team]]] = Field(
        None, description="The teams the user is a member in."
    )
    time_zone_identifier: Optional[String] = Field(
        None, description="The user's timezone identifier."
    )
    title: Optional[String] = Field(None, description="The user's title.")
    url: Optional[String] = Field(None, description="The user's profile url.")
    utc_hours_diff: Optional[Int] = Field(
        None, description="The user’s utc hours difference."
    )
    typename__: Optional[Literal["User"]] = Field("User", alias="__typename")


class Version(BaseModel):
    """
    An object containing the API version details
    """

    display_name: Optional[String] = Field(
        None, description="The display name of the API version"
    )
    kind: Optional[VersionKind] = Field(None, description="The type of the API version")
    value: Optional[String] = Field(
        None, description="Version string that can be used in API-Version header"
    )
    typename__: Optional[Literal["Version"]] = Field("Version", alias="__typename")


class VoteValue(ColumnValue):
    board_id: Optional[ID] = Field(None, description="The board's unique identifier.")
    column: Optional[Column] = Field(
        None, description="The column that this value belongs to."
    )
    id: Optional[ID] = Field(None, description="The column's unique identifier.")
    item_id: Optional[ID] = Field(None, description="The item's unique identifier.")
    text: Optional[String] = None
    type: Optional[ColumnType] = Field(None, description="The column's type.")
    updated_at: Optional[Date] = Field(
        None, description="The date when column value was last updated."
    )
    value: Optional[JSON] = Field(
        None, description="The column's raw value in JSON format."
    )
    vote_count: Optional[Int] = Field(None, description="The total number of votes")
    voter_ids: Optional[List[ID]] = Field(
        None, description="A list of IDs of users who voted"
    )
    voters: Optional[List[User]] = Field(None, description="A list of users who voted")
    typename__: Optional[Literal["VoteValue"]] = Field("VoteValue", alias="__typename")


class Webhook(BaseModel):
    """
    Monday webhooks
    """

    board_id: Optional[ID] = Field(None, description="The webhooks's board id.")
    config: Optional[String] = Field(None, description="The webhooks's config.")
    event: Optional[WebhookEventType] = Field(
        None, description="The event webhook will listen to"
    )
    id: Optional[ID] = Field(None, description="The webhooks's unique identifier.")
    typename__: Optional[Literal["Webhook"]] = Field("Webhook", alias="__typename")


class WeekValue(ColumnValue):
    board_id: Optional[ID] = Field(None, description="The board's unique identifier.")
    column: Optional[Column] = Field(
        None, description="The column that this value belongs to."
    )
    end_date: Optional[Date] = Field(None, description="The end date of the week")
    id: Optional[ID] = Field(None, description="The column's unique identifier.")
    item_id: Optional[ID] = Field(None, description="The item's unique identifier.")
    start_date: Optional[Date] = Field(None, description="The start date of the week")
    text: Optional[String] = Field(
        None, description="The range of dates representing the week (YYYY-MM-DD)"
    )
    type: Optional[ColumnType] = Field(None, description="The column's type.")
    value: Optional[JSON] = Field(
        None, description="The column's raw value in JSON format."
    )
    typename__: Optional[Literal["WeekValue"]] = Field("WeekValue", alias="__typename")


class Workspace(BaseModel):
    """
    A monday.com workspace.
    """

    account_product: Optional[AccountProduct] = Field(
        None, description="The account product that contains workspace."
    )
    created_at: Optional[Date] = Field(
        None, description="The workspace's creation date."
    )
    description: Optional[String] = Field(
        None, description="The workspace's description."
    )
    id: Optional[ID] = Field(None, description="The workspace's unique identifier.")
    is_default_workspace: Optional[Boolean] = Field(
        None,
        description="Returns true if it is the default workspace of the product or account",
    )
    kind: Optional[WorkspaceKind] = Field(
        None, description="The workspace's kind (open / closed)."
    )
    name: Optional[String] = Field(None, description="The workspace's name.")
    owners_subscribers: Optional[List[Optional[User]]] = Field(
        None, description="The workspace's user owners."
    )
    settings: Optional[WorkspaceSettings] = Field(
        None, description="The workspace's settings."
    )
    state: Optional[State] = Field(
        None, description="The workspace's state (all / active / archived / deleted)."
    )
    team_owners_subscribers: Optional[List[Team]] = Field(
        None, description="The workspace's team owners."
    )
    teams_subscribers: Optional[List[Optional[Team]]] = Field(
        None, description="The teams subscribed to the workspace."
    )
    users_subscribers: Optional[List[Optional[User]]] = Field(
        None, description="The users subscribed to the workspace"
    )
    typename__: Optional[Literal["Workspace"]] = Field("Workspace", alias="__typename")


class WorkspaceIcon(BaseModel):
    """
    The workspace's icon.
    """

    color: Optional[String] = Field(
        None,
        description="The icon color in hex value. Used as a background for the image.",
    )
    image: Optional[String] = Field(
        None,
        description="The public image URL, which is temporary in the case of a file that was\nuploaded by the user, so you'll need to pull a new version at least once an hour.\n                               In case it is null, you can use the first letter of the workspace name.",
    )
    typename__: Optional[Literal["WorkspaceIcon"]] = Field(
        "WorkspaceIcon", alias="__typename"
    )


class WorkspaceSettings(BaseModel):
    """
    The workspace's settings.
    """

    icon: Optional[WorkspaceIcon] = Field(None, description="The workspace icon.")
    typename__: Optional[Literal["WorkspaceSettings"]] = Field(
        "WorkspaceSettings", alias="__typename"
    )


class WorldClockValue(ColumnValue):
    board_id: Optional[ID] = Field(None, description="The board's unique identifier.")
    column: Optional[Column] = Field(
        None, description="The column that this value belongs to."
    )
    id: Optional[ID] = Field(None, description="The column's unique identifier.")
    item_id: Optional[ID] = Field(None, description="The item's unique identifier.")
    text: Optional[String] = None
    timezone: Optional[String] = Field(None, description="Timezone")
    type: Optional[ColumnType] = Field(None, description="The column's type.")
    updated_at: Optional[Date] = Field(
        None, description="The date when column value was last updated."
    )
    value: Optional[JSON] = Field(
        None, description="The column's raw value in JSON format."
    )
    typename__: Optional[Literal["WorldClockValue"]] = Field(
        "WorldClockValue", alias="__typename"
    )


class ColumnMappingInput(BaseModel):
    """
    An object defining a mapping of column between source board and destination board
    """

    source: Optional[ID] = Field(
        None, description="The source column's unique identifier."
    )
    target: Optional[ID] = Field(
        None, description="The target column's unique identifier."
    )
    typename__: Optional[Literal["ColumnMappingInput"]] = Field(
        "ColumnMappingInput", alias="__typename"
    )


class CreateDocBoardInput(BaseModel):
    column_id: Optional[String] = Field(None, description="Column id")
    item_id: Optional[ID] = Field(None, description="Item id")
    typename__: Optional[Literal["CreateDocBoardInput"]] = Field(
        "CreateDocBoardInput", alias="__typename"
    )


class CreateDocInput(BaseModel):
    board: Optional[CreateDocBoardInput] = None
    workspace: Optional[CreateDocWorkspaceInput] = None
    typename__: Optional[Literal["CreateDocInput"]] = Field(
        "CreateDocInput", alias="__typename"
    )


class CreateDocWorkspaceInput(BaseModel):
    kind: Optional[BoardKind] = Field(
        None, description="The doc's kind (public / private / share)"
    )
    name: Optional[String] = Field(None, description="The doc's name")
    workspace_id: Optional[ID] = Field(None, description="Workspace id")
    typename__: Optional[Literal["CreateDocWorkspaceInput"]] = Field(
        "CreateDocWorkspaceInput", alias="__typename"
    )


class DynamicPosition(BaseModel):
    is_after: Optional[Boolean] = Field(
        True,
        description="A boolean flag indicating the desired position of the target item: set to true\nto place the item after the reference object, or false to place it before.",
    )
    object_id: Optional[String] = Field(
        None,
        description="The unique identifier of the reference object relative to which the target item will be positioned.",
    )
    object_type: Optional[Object] = Field(
        None,
        description="The type or category of the reference object, used to determine how the target\nitem should be positioned in relation to it.",
    )
    typename__: Optional[Literal["DynamicPosition"]] = Field(
        "DynamicPosition", alias="__typename"
    )


class ItemsPageByColumnValuesQuery(BaseModel):
    column_id: Optional[String] = Field(
        None, description="The column's unique identifier."
    )
    column_values: Optional[List[Optional[String]]] = Field(
        None, description="The column values to search items by."
    )
    typename__: Optional[Literal["ItemsPageByColumnValuesQuery"]] = Field(
        "ItemsPageByColumnValuesQuery", alias="__typename"
    )


class ItemsQuery(BaseModel):
    groups: Optional[List[ItemsQueryGroup]] = Field(
        None, description="A list of rule groups"
    )
    ids: Optional[List[ID]] = Field(
        None,
        description="A list of item IDs to fetch. Use this to fetch a specific set of items by their IDs. Max: 100 IDs",
    )
    operator: Optional[ItemsQueryOperator] = Field(
        "and", description="The operator to use for the query rules or rule groups"
    )
    order_by: Optional[List[ItemsQueryOrderBy]] = None
    rules: Optional[List[ItemsQueryRule]] = Field(None, description="A list of rules")
    typename__: Optional[Literal["ItemsQuery"]] = Field(
        "ItemsQuery", alias="__typename"
    )


class ItemsQueryGroup(BaseModel):
    groups: Optional[List[ItemsQueryGroup]] = Field(
        None, description="A list of rule groups"
    )
    operator: Optional[ItemsQueryOperator] = Field(
        "and", description="The operator to use for the query rules or rule groups"
    )
    rules: Optional[List[ItemsQueryRule]] = Field(None, description="A list of rules")
    typename__: Optional[Literal["ItemsQueryGroup"]] = Field(
        "ItemsQueryGroup", alias="__typename"
    )


class ItemsQueryOrderBy(BaseModel):
    column_id: Optional[String] = None
    direction: Optional[ItemsOrderByDirection] = "asc"
    typename__: Optional[Literal["ItemsQueryOrderBy"]] = Field(
        "ItemsQueryOrderBy", alias="__typename"
    )


class ItemsQueryRule(BaseModel):
    column_id: Optional[ID] = None
    compare_attribute: Optional[String] = None
    compare_value: Optional[CompareValue] = None
    operator: Optional[ItemsQueryRuleOperator] = "any_of"
    typename__: Optional[Literal["ItemsQueryRule"]] = Field(
        "ItemsQueryRule", alias="__typename"
    )


class UpdateWorkspaceAttributesInput(BaseModel):
    """
    Attributes of a workspace to update
    """

    description: Optional[String] = Field(
        None, description="The description of the workspace to update"
    )
    kind: Optional[WorkspaceKind] = Field(
        None, description="The kind of the workspace to update (open / closed)"
    )
    name: Optional[String] = Field(
        None, description="The name of the workspace to update"
    )
    typename__: Optional[Literal["UpdateWorkspaceAttributesInput"]] = Field(
        "UpdateWorkspaceAttributesInput", alias="__typename"
    )


# A single file in a column.
FileValueItem: TypeAlias = Union[
    "FileAssetValue",
    "FileDocValue",
    "FileLinkValue",
]


# Represents a mirrored value (column value, group, or board).
MirroredValue: TypeAlias = Union[
    "Board",
    "BoardRelationValue",
    "ButtonValue",
    "CheckboxValue",
    "ColorPickerValue",
    "CountryValue",
    "CreationLogValue",
    "DateValue",
    "DependencyValue",
    "DocValue",
    "DropdownValue",
    "EmailValue",
    "FileValue",
    "FormulaValue",
    "Group",
    "GroupValue",
    "HourValue",
    "IntegrationValue",
    "ItemIdValue",
    "LastUpdatedValue",
    "LinkValue",
    "LocationValue",
    "LongTextValue",
    "MirrorValue",
    "NumbersValue",
    "PeopleValue",
    "PersonValue",
    "PhoneValue",
    "ProgressValue",
    "RatingValue",
    "StatusValue",
    "SubtasksValue",
    "TagsValue",
    "TeamValue",
    "TextValue",
    "TimeTrackingValue",
    "TimelineValue",
    "UnsupportedValue",
    "VoteValue",
    "WeekValue",
    "WorldClockValue",
]
