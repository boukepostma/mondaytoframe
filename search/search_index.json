{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"mondaytoframe","text":"<p>This Python package helps convert data between the Monday.com API and DataFrames.</p>"},{"location":"#installation","title":"Installation","text":"<p>You can install the package using pip:</p> <pre><code>pip install mondaytoframe\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<p>Here's a basic example of how to use the package:</p> <pre><code>from mondaytoframe import create_board, create_items, read, update\nimport pandas as pd\nimport os\n\nmonday_token = \"your_monday_token_here\"\n\n# Create a new board\ncolumns = {\"Numbers Column\": \"numbers\", \"Text Column\": \"text\"}\nboard_id = create_board(columns, monday_token)\n\n# Create items in a board\nnew_df = pd.DataFrame(\n    {\n        \"Name\": [\"first\", \"second\"],\n        \"Numbers Column\": [1.0, 2.0],\n        \"Text Column\": [\"a\", \"b\"],\n    }\n)\ncreate_items(board_id, new_df, monday_token)\n\n# Read your board as a dataframe...\ndf = read(board_id, monday_token)\n\n# ... perform data transformation on your dataframe\ndf_transformed = df.copy()\ndf_transformed[\"Numbers Column\"] = df[\"Numbers Column\"] + 1\n\n# ... and store the results in Monday again!\nupdate(board_id, df_transformed, monday_token)\n</code></pre> <p>[!TIP] Instead of providing <code>monday_token</code>, you could also set <code>MONDAYTOFRAME_TOKEN</code> environment variable.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Easy conversion between Monday.com API data and DataFrames</li> <li>Simplifies data manipulation and analysis</li> <li>Support for multiple monday column types</li> </ul>"},{"location":"#supported-data-types","title":"Supported Data Types","text":"Column Type Supported by <code>read</code> Supported by <code>update</code> Item ID \u2705 \u2705 Name \u2705 \u2705 Text \u2705 \u2705 Long Text \u2705 \u2705 Number \u2705 \u2705 Date \u2705 \u2705 Status \u2705 \u2705 Dropdown \u2705 \u2705 People \u2705 \u2705 Tags \u2705 \u2705 Checkbox \u2705 \u2705 Link \u2705 \u2705 Email \u2705 \u2705 Phone \u2705 \u2705 Timeline \u274c \u274c Country \u274c \u274c Color Picker \u274c \u274c Rating \u274c \u274c Progress Tracking \u274c \u274c Formula \u274c \u274c Auto Number \u274c \u274c Dependency \u274c \u274c Button \u274c \u274c World Clock \u274c \u274c Location \u274c \u274c Hour \u274c \u274c Week \u274c \u274c File \u274c \u274c Board Relation \u274c \u274c Mirror \u274c \u274c Vote \u274c \u274c Subitems \u274c \u274c"},{"location":"#contributing","title":"Contributing","text":"<p>Contributions are welcome! Please read the contributing guidelines first.</p>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the BSD 3-Clause License - see the LICENSE file for details.</p>"},{"location":"#contact","title":"Contact","text":"<p>For any questions or issues, please open an issue.</p>"},{"location":"api/","title":"Api reference","text":""},{"location":"api/#mondaytoframe.create_board","title":"<code>mondaytoframe.create_board(column_types, monday_token, board_name='Created by mondaytoframe', board_kind=BoardKind.public, workspace_id=None)</code>","text":"Source code in <code>src/mondaytoframe/io.py</code> <pre><code>@validate_call(\n    config=ConfigDict(arbitrary_types_allowed=True, coerce_numbers_to_str=True)\n)\ndef create_board(\n    column_types: dict[str, ColumnType],\n    monday_token: TokenType,\n    board_name: str = \"Created by mondaytoframe\",\n    board_kind: BoardKind = BoardKind.public,\n    workspace_id: int | None = None,\n) -&gt; str:\n    monday = MondayClient(monday_token)\n\n    board = monday.boards.create_board(board_name, board_kind, workspace_id)\n    board_id = board[\"data\"][\"create_board\"][\"id\"]\n\n    for title, col_type in column_types.items():\n        monday.columns.create_column(\n            board_id=board_id, column_title=title, column_type=col_type\n        )\n    logger.info(f\"Board {board_id} created successfully.\")\n\n    return board_id\n</code></pre>"},{"location":"api/#mondaytoframe.create_items","title":"<code>mondaytoframe.create_items(board_id, df, monday_token, unknown_type='raise')</code>","text":"<p>Creates items on a Monday.com board based on the provided dataframe.</p> <p>Parameters:</p> Name Type Description Default <code>board_id</code> <code>str</code> <p>The ID of the Monday.com board where items will be created.</p> required <code>df</code> <code>DataFrame</code> <p>A pandas DataFrame containing the data for the items to be created. The DataFrame must include a 'Name' column, and it must not contain null values.</p> required <code>monday_token</code> <code>TokenType</code> <p>The authentication token for accessing the Monday.com API.</p> required <code>unknown_type</code> <code>Literal['drop', 'raise']</code> <p>Specifies how to handle unknown columns in the DataFrame that do not match the board schema. Defaults to \"raise\". - \"drop\": Drops unknown columns. - \"raise\": Raises an error if unknown columns are found.</p> <code>'raise'</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the DataFrame is empty, does not contain a 'Name' column, or if the 'Name' column contains null values.</p> Notes <ul> <li>The function aligns the DataFrame with the board schema before creating items.</li> <li>Each row in the DataFrame corresponds to an item on the board.</li> <li>The 'name' and 'group' columns in the DataFrame are used for item names and group IDs,   respectively. Other columns are treated as column values for the items.</li> </ul> Source code in <code>src/mondaytoframe/io.py</code> <pre><code>@validate_call(\n    config=ConfigDict(arbitrary_types_allowed=True, coerce_numbers_to_str=True)\n)\ndef create_items(\n    board_id: str,\n    df: pd.DataFrame,\n    monday_token: TokenType,\n    unknown_type: Literal[\"drop\", \"raise\"] = \"raise\",\n):\n    \"\"\"\n    Creates items on a Monday.com board based on the provided dataframe.\n\n    Args:\n        board_id (str): The ID of the Monday.com board where items will be created.\n        df (pd.DataFrame): A pandas DataFrame containing the data for the items to be created.\n            The DataFrame must include a 'Name' column, and it must not contain null values.\n        monday_token (TokenType): The authentication token for accessing the Monday.com API.\n        unknown_type (Literal[\"drop\", \"raise\"], optional): Specifies how to handle unknown columns\n            in the DataFrame that do not match the board schema. Defaults to \"raise\".\n            - \"drop\": Drops unknown columns.\n            - \"raise\": Raises an error if unknown columns are found.\n\n    Raises:\n        ValueError: If the DataFrame is empty, does not contain a 'Name' column, or if the 'Name'\n            column contains null values.\n\n    Notes:\n        - The function aligns the DataFrame with the board schema before creating items.\n        - Each row in the DataFrame corresponds to an item on the board.\n        - The 'name' and 'group' columns in the DataFrame are used for item names and group IDs,\n          respectively. Other columns are treated as column values for the items.\n    \"\"\"\n    if df.empty:\n        return\n\n    if \"Name\" not in df.columns:\n        raise ValueError(\n            \"The dataframe must contain a 'Name' column to create items in Monday.com.\"\n        )\n    if df[\"Name\"].isnull().any():\n        raise ValueError(\n            \"The 'Name' column in the dataframe must not contain null values.\"\n        )\n\n    monday = MondayClient(monday_token)\n\n    df = _align_df_with_board_schema(df, monday, board_id, unknown_type)\n\n    for _, row in df.iterrows():\n        monday.items.create_item(\n            board_id=board_id,\n            item_name=row[\"name\"] if \"name\" in row else \"\",\n            group_id=row[\"group\"] if \"group\" in row else \"\",\n            column_values=row.drop([\"name\", \"group\"], errors=\"ignore\").to_dict(),\n        )\n    logger.info(f\"Items created successfully on board {board_id}.\")\n</code></pre>"},{"location":"api/#mondaytoframe.read","title":"<code>mondaytoframe.read(board_id, monday_token, unknown_type='text', **kwargs)</code>","text":"<p>Read data from a Monday.com board into a pandas DataFrame.</p> <p>Parameters:</p> Name Type Description Default <code>board_id</code> <code>str</code> <p>The ID of the Monday.com board to read data from.</p> required <code>monday_token</code> <code>TokenType</code> <p>The authentication token for Monday.com API.</p> required <code>unknown_type</code> <code>Literal['text', 'drop', 'raise']</code> <p>Specifies how to handle unknown column types. - \"text\": Use a default text parser for unknown column types (default). - \"drop\": Ignore unknown column types. - \"raise\": Raise a ValueError if unknown column types are found.</p> <code>'text'</code> <code>**kwargs</code> <code>dict[str, Any]</code> <p>Additional arguments to pass to the Monday.com API.</p> <code>{}</code> <p>Returns:</p> Type Description <p>pd.DataFrame: A pandas DataFrame containing the board data.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If unknown column types are found and <code>unknown_type</code> is set to \"raise\".</p> Notes <p>The function uses predefined parsers for known column types. If a column type is not recognized and <code>unknown_type</code> is set to \"text\", a default text parser will be used. If <code>unknown_type</code> is set to \"drop\", the unknown columns will be ignored.</p> <p>Usage:</p> <pre><code>from mondaytoframe import read\n\ndf = read(board_id=\"123456\", monday_token=\"your_token\")\nprint(df.head())\n</code></pre> Source code in <code>src/mondaytoframe/io.py</code> <pre><code>@validate_call(\n    config=ConfigDict(arbitrary_types_allowed=True, coerce_numbers_to_str=True)\n)\ndef read(\n    board_id: str,\n    monday_token: TokenType,\n    unknown_type: Literal[\"text\", \"drop\", \"raise\"] = \"text\",\n    **kwargs: Any,\n):\n    \"\"\"\n    Read data from a Monday.com board into a pandas DataFrame.\n\n    Arguments:\n        board_id (str): The ID of the Monday.com board to read data from.\n        monday_token (TokenType): The authentication token for Monday.com API.\n        unknown_type (Literal[\"text\", \"drop\", \"raise\"]): Specifies how to handle unknown column types.\n            - \"text\": Use a default text parser for unknown column types (default).\n            - \"drop\": Ignore unknown column types.\n            - \"raise\": Raise a ValueError if unknown column types are found.\n        **kwargs (dict[str, Any]): Additional arguments to pass to the Monday.com API.\n\n    Returns:\n        pd.DataFrame: A pandas DataFrame containing the board data.\n\n    Raises:\n        ValueError: If unknown column types are found and `unknown_type` is set to \"raise\".\n\n    Notes:\n        The function uses predefined parsers for known column types. If a column type is not recognized and `unknown_type`\n        is set to \"text\", a default text parser will be used. If `unknown_type` is set to \"drop\", the unknown columns will\n        be ignored.\n\n    Usage:\n\n    ```python\n    from mondaytoframe import read\n\n    df = read(board_id=\"123456\", monday_token=\"your_token\")\n    print(df.head())\n    ```\n    \"\"\"\n    monday = MondayClient(monday_token)\n    column_specifications = _fetch_schema_board(monday, board_id).columns\n\n    cols_without_parsers = {\n        spec.id: spec.type\n        for spec in column_specifications\n        if spec.type not in PARSERS_FOR_DF and spec.id != \"name\"\n    }\n    col_parser_mapping = {\n        spec.id: PARSERS_FOR_DF[spec.type]\n        for spec in column_specifications\n        if spec.type in PARSERS_FOR_DF\n    }\n    if cols_without_parsers:\n        match unknown_type:\n            case \"raise\":\n                raise ValueError(\n                    f\"Unknown column types found in the board: {cols_without_parsers}.\"\n                    \"Set unknown_type='text' to try to get them using a default parser or \"\n                    \"set unknown_type='drop' to ignore them.\"\n                )\n            case \"drop\":\n                msg = (\n                    f\"Unknown column types found in the board: {cols_without_parsers}. Not reading them.\"\n                    \"Set unknown_type='text' to try to get them using a default text parser.\"\n                )\n                logger.warning(msg)\n            case \"text\":\n                col_parser_mapping.update(\n                    {\n                        col: PARSERS_FOR_DF[ColumnType.text]\n                        for col in cols_without_parsers\n                    }\n                )\n\n    items = []\n    cursor = None\n    while True:\n        query_result = fetch_items_by_board_id(\n            monday, board_id, cursor=cursor, **kwargs\n        )\n        validated = ItemsByBoardResponse(**query_result)\n        board = validated.data.boards[0]\n        items += board.items_page.items\n        cursor = board.items_page.cursor\n        if cursor is None:\n            break\n\n    items_parsed = []\n    for item in items:\n        column_values_dict = {\n            (column_value.id): col_parser_mapping[column_value.id](column_value)  # type: ignore[operator]\n            for column_value in item.column_values\n            if column_value.id not in cols_without_parsers\n        }\n\n        record = {\n            \"id\": item.id,\n            \"Name\": item.name,\n            \"Group\": item.group.title,\n            **column_values_dict,\n        }\n        items_parsed.append(record)\n\n    name_mapping = {\n        spec.id: spec.title for spec in column_specifications if spec.title != \"Name\"\n    }\n    logger.info(\n        f\"Fetched {len(items_parsed)} items from board {board_id} with columns: {name_mapping}\"\n    )\n    return pd.DataFrame.from_records(items_parsed, index=\"id\").rename(\n        columns=name_mapping\n    )\n</code></pre>"},{"location":"api/#mondaytoframe.update","title":"<code>mondaytoframe.update(board_id, df, monday_token, unknown_type='raise', **kwargs)</code>","text":"<p>Update a pandas DataFrame to a Monday.com board.</p> <p>Parameters:</p> Name Type Description Default <code>board_id</code> <code>str</code> <p>The ID of the Monday.com board.</p> required <code>df</code> <code>DataFrame</code> <p>The DataFrame to update to the board.</p> required <code>monday_token</code> <code>TokenType</code> <p>The authentication token for Monday.com.</p> required <code>unknown_type</code> <code>Literal['drop', 'raise']</code> <p>Specifies how to handle columns in the DataFrame that do not have a corresponding parser in the board schema. - \"drop\": Ignore columns that do not have a corresponding parser (default). - \"raise\": Raise a ValueError if columns do not have a corresponding parser.</p> <code>'raise'</code> <code>**kwargs</code> <code>Any</code> <p>Additional keyword arguments to pass to the Monday.com API.</p> <code>{}</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>If unknown_type is \"raise\" and there are columns in the DataFrame that do not have a corresponding parser in the board schema.</p> <p>Usage:</p> <pre><code>from mondaytoframe import update\nimport pandas as pd\n\ndf = pd.DataFrame({\n    \"Name\": [\"Task 1\", \"Task 2\"],\n    \"Status\": [\"Done\", \"In Progress\"],\n    \"Tags\": [[\"tag1\"], [\"tag2\", \"tag3\"]],\n})\nupdate(board_id=\"123456\", df=df, monday_token=\"your_token\")\n</code></pre> Source code in <code>src/mondaytoframe/io.py</code> <pre><code>@validate_call(\n    config=ConfigDict(arbitrary_types_allowed=True, coerce_numbers_to_str=True)\n)\ndef update(\n    board_id: str,\n    df: pd.DataFrame,\n    monday_token: TokenType,\n    unknown_type: Literal[\"drop\", \"raise\"] = \"raise\",\n    **kwargs: Any,\n):\n    \"\"\"\n    Update a pandas DataFrame to a Monday.com board.\n\n    Arguments:\n        board_id (str): The ID of the Monday.com board.\n        df (pd.DataFrame): The DataFrame to update to the board.\n        monday_token (TokenType): The authentication token for Monday.com.\n        unknown_type (Literal[\"drop\", \"raise\"]): Specifies how to handle columns in the DataFrame that do not have a corresponding parser in the board schema.\n            - \"drop\": Ignore columns that do not have a corresponding parser (default).\n            - \"raise\": Raise a ValueError if columns do not have a corresponding parser.\n        **kwargs (Any): Additional keyword arguments to pass to the Monday.com API.\n\n    Raises:\n        ValueError: If unknown_type is \"raise\" and there are columns in the DataFrame that do not have a corresponding parser in the board schema.\n\n    Usage:\n\n    ```python\n    from mondaytoframe import update\n    import pandas as pd\n\n    df = pd.DataFrame({\n        \"Name\": [\"Task 1\", \"Task 2\"],\n        \"Status\": [\"Done\", \"In Progress\"],\n        \"Tags\": [[\"tag1\"], [\"tag2\", \"tag3\"]],\n    })\n    update(board_id=\"123456\", df=df, monday_token=\"your_token\")\n    ```\n    \"\"\"\n\n    if df.empty:\n        return\n    monday = MondayClient(monday_token)\n\n    df = _align_df_with_board_schema(df, monday, board_id, unknown_type)\n\n    for item_id, row in df.iterrows():\n        monday.items.change_multiple_column_values(\n            board_id=board_id,\n            item_id=item_id,\n            column_values=row.drop(\"Group\").to_dict(),\n            **kwargs,\n        )\n    logger.info(f\"Items updated successfully on board {board_id}.\")\n</code></pre>"},{"location":"api/#mondaytoframe.delete_board","title":"<code>mondaytoframe.delete_board(board_id, monday_token)</code>","text":"<p>Delete a board in Monday.com.</p> <p>Parameters:</p> Name Type Description Default <code>board_id</code> <code>str</code> <p>The ID of the board to delete.</p> required <code>monday_token</code> <code>TokenType</code> <p>The authentication token for Monday.com.</p> required <p>Usage:</p> <pre><code>from mondaytoframe import delete_board\n\ndelete_board(board_id=\"123456\", monday_token=\"your_token\")\n</code></pre> Source code in <code>src/mondaytoframe/io.py</code> <pre><code>@validate_call(\n    config=ConfigDict(arbitrary_types_allowed=True, coerce_numbers_to_str=True)\n)\ndef delete_board(\n    board_id: str,\n    monday_token: TokenType,\n):\n    \"\"\"\n    Delete a board in Monday.com.\n\n    Arguments:\n        board_id (str): The ID of the board to delete.\n        monday_token (TokenType): The authentication token for Monday.com.\n\n    Usage:\n\n    ```python\n    from mondaytoframe import delete_board\n\n    delete_board(board_id=\"123456\", monday_token=\"your_token\")\n    ```\n    \"\"\"\n    monday = MondayClient(monday_token)\n    monday.custom.execute_custom_query(\n        f\"mutation {{ delete_board (board_id: {board_id}) {{ id }} }}\"\n    )\n    logger.info(f\"Board {board_id} deleted successfully.\")\n</code></pre>"},{"location":"contributing/","title":"Contributing to MondayToFrame","text":"<p>Thank you for considering contributing to MondayToFrame! We appreciate your support.</p>"},{"location":"contributing/#how-to-contribute","title":"How to Contribute","text":"<ol> <li>Fork the repository: Click the \"Fork\" button at the top right of the repository page.</li> <li>Clone your fork:      <code>sh     git clone https://github.com/boukepostma/mondaytoframe.git</code></li> <li>Create a branch:      <code>sh     git checkout -b feature/your-feature-name</code></li> <li>Make your changes: Implement your feature or bug fix.</li> <li>Commit your changes:      <code>sh     git commit -m \"Description of your changes\"</code></li> <li>Push to your fork:      <code>sh     git push origin feature/your-feature-name</code></li> <li>Create a Pull Request: Go to the original repository and click \"New Pull Request\".</li> </ol>"},{"location":"contributing/#reporting-issues","title":"Reporting Issues","text":"<p>If you find a bug or have a feature request, please create an issue in the Issues section.</p>"},{"location":"contributing/#style-guide","title":"Style Guide","text":"<ul> <li>Follow the existing code style.</li> <li>Write clear and concise commit messages.</li> <li>Add comments to explain complex logic.</li> </ul>"},{"location":"contributing/#testing","title":"Testing","text":"<p>Ensure that your changes do not break existing tests and add new tests for your features if applicable.</p> <p>Thank you for your contributions!</p>"}]}